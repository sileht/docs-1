---
import { removeLeadingSlash, removeTrailingSlash } from '../../util';
import SidebarContent from './SidebarContent.astro';
import ThemeToggleButton from '../Header/ThemeToggleButton';

export interface Props {
	currentPage: string;
}

const { currentPage } = Astro.props as Props;
const currentPageMatch = removeLeadingSlash(removeTrailingSlash(currentPage));
---

<nav aria-label={'Primary'}>
	<ul class={`nav-groups`}>
		<SidebarContent currentPageMatch={currentPageMatch} />
		<li style="text-align: center;">
			<ThemeToggleButton
				client:visible
				labels={{ useLight: 'Use light theme', useDark: 'Use dark theme' }}
			/>
		</li>
	</ul>
</nav>

<!-- Preserve sidebar scroll across page loads -->
<script is:inline>
	{
		const leftSidebar = document.querySelector('.nav-groups');
		const leftSidebarScroll = localStorage.getItem('sidebar-scroll');
		if (leftSidebarScroll !== null) {
			leftSidebar.scrollTop = parseInt(leftSidebarScroll, 10);
		}
		window.addEventListener('beforeunload', () => {
			localStorage.setItem('sidebar-scroll', leftSidebar.scrollTop);
		});
	}
</script>

<style>
	nav {
		width: 100%;
		height: 100%;
		font-size: var(--theme-text-md);
	}
	.nav-groups {
		padding-top: 1rem;
		max-height: 100%;
		overflow-x: visible;
		overflow-y: auto;
	}

	@media (min-width: 50em) {
		.nav-groups {
			position: fixed;
			top: calc(var(--theme-navbar-height) + 3rem);
			bottom: 0;
			width: calc(var(--theme-left-sidebar-width) - var(--min-spacing-inline) * 1.6);
		}
	}

	@media not screen and (min-width: 50em) {
		nav :global(.TabGroup) {
			display: none;
		}
	}
</style>
