{"openapi": "3.1.0", "info": {"title": "Mergify API", "description": "Faster & safer code merge", "termsOfService": "https://mergify.com/tos", "contact": {"name": "Mergify", "url": "https://mergify.com/", "email": "support@mergify.com"}, "version": "v1"}, "servers": [{"url": "https://api.mergify.com/v1", "description": "default"}], "paths": {"/application": {"get": {"tags": ["applications"], "summary": "Get current application", "description": "Get the current authenticated application", "operationId": "application_application_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ApplicationResponse"}, "example": {"id": "e155518c-ca1b-443c-9be9-fe90fdab7345", "name": "an application name", "account_scope": {"id": 123456, "login": "Mergifyio"}}}}}, "403": {"description": "Forbidden"}, "404": {"description": "Not found"}}, "security": [{"ApplicationAuth": []}]}}, "/repos/{owner}/{repository}/queues/configuration": {"get": {"tags": ["queues"], "summary": "Get merge queues configuration", "description": "Get the list of all merge queues configuration sorted by processing order", "operationId": "repository_queues_configuration_repos__owner___repository__queues_configuration_get", "security": [{"ApplicationAuth": []}], "parameters": [{"name": "owner", "in": "path", "required": true, "schema": {"type": "string", "minLength": 1, "maxLength": 40, "pattern": "^[a-zA-Z0-9\\-]+$", "description": "The owner of the repository", "title": "Owner"}, "description": "The owner of the repository"}, {"name": "repository", "in": "path", "required": true, "schema": {"anyOf": [{"type": "string", "minLength": 1, "pattern": "^[\\w\\-\\.]+$"}, {"type": "null"}], "description": "The name of the repository", "title": "Repository"}, "description": "The name of the repository"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/QueuesConfig"}}}}, "403": {"description": "Forbidden"}, "422": {"description": "The configuration file is invalid."}}}}, "/repos/{owner}/{repository}/queue/{queue_name}/freeze": {"put": {"tags": ["queues"], "summary": "Freezes merge queue", "description": "Freezes the merge of the requested queue and the queues following it", "operationId": "create_queue_freeze_repos__owner___repository__queue__queue_name__freeze_put", "security": [{"ApplicationAuth": []}], "parameters": [{"name": "owner", "in": "path", "required": true, "schema": {"type": "string", "minLength": 1, "maxLength": 40, "pattern": "^[a-zA-Z0-9\\-]+$", "description": "The owner of the repository", "title": "Owner"}, "description": "The owner of the repository"}, {"name": "repository", "in": "path", "required": true, "schema": {"anyOf": [{"type": "string", "minLength": 1, "pattern": "^[\\w\\-\\.]+$"}, {"type": "null"}], "description": "The name of the repository", "title": "Repository"}, "description": "The name of the repository"}, {"name": "queue_name", "in": "path", "required": true, "schema": {"type": "string", "description": "Name of the queue", "title": "Queue Name"}, "description": "Name of the queue"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/QueueFreezePayload"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/QueueFreezeResponse"}}}}, "403": {"description": "Forbidden"}, "404": {"description": "The queue does not exist"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["queues"], "summary": "Unfreeze merge queue", "description": "Unfreeze the specified merge queue", "operationId": "delete_queue_freeze_repos__owner___repository__queue__queue_name__freeze_delete", "security": [{"ApplicationAuth": []}], "parameters": [{"name": "owner", "in": "path", "required": true, "schema": {"type": "string", "minLength": 1, "maxLength": 40, "pattern": "^[a-zA-Z0-9\\-]+$", "description": "The owner of the repository", "title": "Owner"}, "description": "The owner of the repository"}, {"name": "repository", "in": "path", "required": true, "schema": {"anyOf": [{"type": "string", "minLength": 1, "pattern": "^[\\w\\-\\.]+$"}, {"type": "null"}], "description": "The name of the repository", "title": "Repository"}, "description": "The name of the repository"}, {"name": "queue_name", "in": "path", "required": true, "schema": {"type": "string", "description": "Name of the queue", "title": "Queue Name"}, "description": "Name of the queue"}], "responses": {"204": {"description": "Successful Response"}, "403": {"description": "Forbidden"}, "404": {"description": "The queue does not exist or is not currently frozen"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "get": {"tags": ["queues"], "summary": "Get queue freeze data", "description": "Checks if the queue is frozen and get the queue freeze data", "operationId": "get_queue_freeze_repos__owner___repository__queue__queue_name__freeze_get", "security": [{"ApplicationAuth": []}], "parameters": [{"name": "owner", "in": "path", "required": true, "schema": {"type": "string", "minLength": 1, "maxLength": 40, "pattern": "^[a-zA-Z0-9\\-]+$", "description": "The owner of the repository", "title": "Owner"}, "description": "The owner of the repository"}, {"name": "repository", "in": "path", "required": true, "schema": {"anyOf": [{"type": "string", "minLength": 1, "pattern": "^[\\w\\-\\.]+$"}, {"type": "null"}], "description": "The name of the repository", "title": "Repository"}, "description": "The name of the repository"}, {"name": "queue_name", "in": "path", "required": true, "schema": {"type": "string", "description": "Name of the queue", "title": "Queue Name"}, "description": "Name of the queue"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/QueueFreezeResponse"}}}}, "403": {"description": "Forbidden"}, "404": {"description": "The queue does not exist or is not currently frozen"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/repos/{owner}/{repository}/queues/freezes": {"get": {"tags": ["queues"], "summary": "Get the list of frozen queues", "description": "Get the list of frozen queues inside the requested repository", "operationId": "get_list_queue_freeze_repos__owner___repository__queues_freezes_get", "security": [{"ApplicationAuth": []}], "parameters": [{"name": "owner", "in": "path", "required": true, "schema": {"type": "string", "minLength": 1, "maxLength": 40, "pattern": "^[a-zA-Z0-9\\-]+$", "description": "The owner of the repository", "title": "Owner"}, "description": "The owner of the repository"}, {"name": "repository", "in": "path", "required": true, "schema": {"anyOf": [{"type": "string", "minLength": 1, "pattern": "^[\\w\\-\\.]+$"}, {"type": "null"}], "description": "The name of the repository", "title": "Repository"}, "description": "The name of the repository"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/QueueFreezeResponse"}}}}, "403": {"description": "Forbidden"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/repos/{owner}/{repository}/queue/pause": {"put": {"tags": ["queues"], "summary": "Pause the merge queue", "description": "Pause the merge of the requested repository", "operationId": "create_queue_pause_repos__owner___repository__queue_pause_put", "security": [{"ApplicationAuth": []}], "parameters": [{"name": "owner", "in": "path", "required": true, "schema": {"type": "string", "minLength": 1, "maxLength": 40, "pattern": "^[a-zA-Z0-9\\-]+$", "description": "The owner of the repository", "title": "Owner"}, "description": "The owner of the repository"}, {"name": "repository", "in": "path", "required": true, "schema": {"anyOf": [{"type": "string", "minLength": 1, "pattern": "^[\\w\\-\\.]+$"}, {"type": "null"}], "description": "The name of the repository", "title": "Repository"}, "description": "The name of the repository"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/QueuePausePayload"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/QueuePauseResponse"}}}}, "403": {"description": "Forbidden"}, "404": {"description": "The pause does not exist"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["queues"], "summary": "Unpause merge queue", "description": "Unpause the merge queue of the requested repository", "operationId": "delete_queue_pause_repos__owner___repository__queue_pause_delete", "security": [{"ApplicationAuth": []}], "parameters": [{"name": "owner", "in": "path", "required": true, "schema": {"type": "string", "minLength": 1, "maxLength": 40, "pattern": "^[a-zA-Z0-9\\-]+$", "description": "The owner of the repository", "title": "Owner"}, "description": "The owner of the repository"}, {"name": "repository", "in": "path", "required": true, "schema": {"anyOf": [{"type": "string", "minLength": 1, "pattern": "^[\\w\\-\\.]+$"}, {"type": "null"}], "description": "The name of the repository", "title": "Repository"}, "description": "The name of the repository"}], "responses": {"204": {"description": "Successful Response"}, "403": {"description": "Forbidden"}, "404": {"description": "The merge queue is not currently paused on this repository"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "get": {"tags": ["queues"], "summary": "Get queue pause data", "description": "Checks if the merge queue is paused and get the queue pause data", "operationId": "get_queue_pause_repos__owner___repository__queue_pause_get", "security": [{"ApplicationAuth": []}], "parameters": [{"name": "owner", "in": "path", "required": true, "schema": {"type": "string", "minLength": 1, "maxLength": 40, "pattern": "^[a-zA-Z0-9\\-]+$", "description": "The owner of the repository", "title": "Owner"}, "description": "The owner of the repository"}, {"name": "repository", "in": "path", "required": true, "schema": {"anyOf": [{"type": "string", "minLength": 1, "pattern": "^[\\w\\-\\.]+$"}, {"type": "null"}], "description": "The name of the repository", "title": "Repository"}, "description": "The name of the repository"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/QueuePauseResponse"}}}}, "403": {"description": "Forbidden"}, "404": {"description": "The merge queue is not currently paused on this repository"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/repos/{owner}/{repository}/queues": {"get": {"tags": ["queues"], "summary": "Get merge queues", "description": "Get the list of pull requests queued in a merge queue of a repository", "operationId": "repository_queues_repos__owner___repository__queues_get", "security": [{"ApplicationAuth": []}], "parameters": [{"name": "owner", "in": "path", "required": true, "schema": {"type": "string", "minLength": 1, "maxLength": 40, "pattern": "^[a-zA-Z0-9\\-]+$", "description": "The owner of the repository", "title": "Owner"}, "description": "The owner of the repository"}, {"name": "repository", "in": "path", "required": true, "schema": {"anyOf": [{"type": "string", "minLength": 1, "pattern": "^[\\w\\-\\.]+$"}, {"type": "null"}], "description": "The name of the repository", "title": "Repository"}, "description": "The name of the repository"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Queues"}, "example": {"queues": [{"branch": {"name": "main"}, "pull_requests": [{"number": 5678, "position": 1, "priority": 100, "effective_priority": 100, "partition_name": "__default__", "queue_rule": {"name": "default", "config": {"priority": 100, "batch_size": 1, "batch_max_wait_time": 0, "speculative_checks": 2, "allow_inplace_checks": true, "allow_queue_branch_edit": false, "disallow_checks_interruption_from_queues": [], "checks_timeout": 60, "draft_bot_account": "", "queue_branch_prefix": "mergify/merge-queue/", "queue_branch_merge_method": "fast-forward", "batch_max_failure_resolution_attempts": 10, "commit_message_template": "", "merge_bot_account": "", "merge_method": "merge", "update_bot_account": "", "update_method": "rebase", "autosquash": true}}, "speculative_check_pull_request": {"in_place": true, "number": 5678, "started_at": "2021-10-14T14:19:12+00:00", "ended_at": "2021-10-14T15:00:42+00:00", "checks": [], "evaluated_conditions": "", "state": "success"}, "mergeability_check": {"check_type": "in_place", "pull_request_number": 5678, "started_at": "2021-10-14T14:19:12+00:00", "ended_at": "2021-10-14T15:00:42+00:00", "state": "success"}, "queued_at": "2021-10-14T14:19:12+00:00", "estimated_time_of_merge": "2021-10-14T15:19:12+00:00"}, {"number": 4242, "position": 1, "priority": 100, "effective_priority": 100, "partition_name": "__default__", "queue_rule": {"name": "default", "config": {"priority": 100, "batch_size": 1, "batch_max_wait_time": 0, "speculative_checks": 2, "allow_inplace_checks": true, "allow_queue_branch_edit": false, "disallow_checks_interruption_from_queues": [], "checks_timeout": 60, "draft_bot_account": "", "queue_branch_prefix": "mergify/merge-queue/", "queue_branch_merge_method": "fast-forward", "batch_max_failure_resolution_attempts": 10, "commit_message_template": "", "merge_bot_account": "", "merge_method": "merge", "update_bot_account": "", "update_method": "rebase", "autosquash": false}}, "speculative_check_pull_request": {"in_place": false, "number": 7899, "started_at": "2021-10-14T14:19:12+00:00", "ended_at": "2021-10-14T15:00:42+00:00", "checks": [], "evaluated_conditions": "", "state": "success"}, "mergeability_check": {"check_type": "draft_pr", "pull_request_number": 7899, "started_at": "2021-10-14T14:19:12+00:00", "ended_at": "2021-10-14T15:00:42+00:00", "state": "success"}, "queued_at": "2021-10-14T14:19:12+00:00", "estimated_time_of_merge": "2021-10-14T15:19:12+00:00"}]}]}}}}, "403": {"description": "Forbidden"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/badges/{owner}/{repository}.png": {"get": {"tags": ["badges"], "summary": "Get PNG badge", "description": "Get badge in PNG image format", "operationId": "badge_png_badges__owner___repository__png_get", "parameters": [{"name": "owner", "in": "path", "required": true, "schema": {"type": "string", "minLength": 1, "maxLength": 40, "pattern": "^[a-zA-Z0-9\\-]+$", "description": "The owner of the repository", "title": "Owner"}, "description": "The owner of the repository"}, {"name": "repository", "in": "path", "required": true, "schema": {"type": "string", "minLength": 1, "pattern": "^[\\w\\-\\.]+$", "description": "The name of the repository", "title": "Repository"}, "description": "The name of the repository"}, {"name": "style", "in": "query", "required": false, "schema": {"type": "string", "description": "The style of the button, more details on https://shields.io/.", "default": "flat", "title": "Style"}, "description": "The style of the button, more details on https://shields.io/."}], "responses": {"200": {"description": "An PNG image.", "content": {"image/png": {}}}, "403": {"description": "Forbidden"}, "404": {"description": "Not found"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/badges/{owner}/{repository}.svg": {"get": {"tags": ["badges"], "summary": "Get SVG badge", "description": "Get badge in SVG image format", "operationId": "badge_svg_badges__owner___repository__svg_get", "parameters": [{"name": "owner", "in": "path", "required": true, "schema": {"type": "string", "minLength": 1, "maxLength": 40, "pattern": "^[a-zA-Z0-9\\-]+$", "description": "The owner of the repository", "title": "Owner"}, "description": "The owner of the repository"}, {"name": "repository", "in": "path", "required": true, "schema": {"type": "string", "minLength": 1, "pattern": "^[\\w\\-\\.]+$", "description": "The name of the repository", "title": "Repository"}, "description": "The name of the repository"}, {"name": "style", "in": "query", "required": false, "schema": {"type": "string", "description": "The style of the button, more details on https://shields.io/.", "default": "flat", "title": "Style"}, "description": "The style of the button, more details on https://shields.io/."}], "responses": {"200": {"description": "An SVG image.", "content": {"image/png": {}}}, "403": {"description": "Forbidden"}, "404": {"description": "Not found"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/badges/{owner}/{repository}": {"get": {"tags": ["badges"], "summary": "Get shields.io badge config", "description": "Get shields.io badge JSON configuration", "operationId": "badge_badges__owner___repository__get", "parameters": [{"name": "owner", "in": "path", "required": true, "schema": {"type": "string", "minLength": 1, "maxLength": 40, "pattern": "^[a-zA-Z0-9\\-]+$", "description": "The owner of the repository", "title": "Owner"}, "description": "The owner of the repository"}, {"name": "repository", "in": "path", "required": true, "schema": {"type": "string", "minLength": 1, "pattern": "^[\\w\\-\\.]+$", "description": "The name of the repository", "title": "Repository"}, "description": "The name of the repository"}], "responses": {"200": {"description": "The shields.io badge JSON configuration", "content": {"application/json": {}}}, "403": {"description": "Forbidden"}, "404": {"description": "Not found"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/repos/{owner}/{repository}/pulls/{number}/simulator": {"post": {"tags": ["simulator"], "summary": "Get a Mergify simulation for a pull request", "description": "Get a simulation of what Mergify will do on a pull request", "operationId": "simulator_pull_repos__owner___repository__pulls__number__simulator_post", "security": [{"ApplicationAuth": []}], "parameters": [{"name": "number", "in": "path", "required": true, "schema": {"type": "integer", "description": "The pull request number", "title": "Number"}, "description": "The pull request number"}, {"name": "owner", "in": "path", "required": true, "schema": {"type": "string", "minLength": 1, "maxLength": 40, "pattern": "^[a-zA-Z0-9\\-]+$", "description": "The owner of the repository", "title": "Owner"}, "description": "The owner of the repository"}, {"name": "repository", "in": "path", "required": true, "schema": {"anyOf": [{"type": "string", "minLength": 1, "pattern": "^[\\w\\-\\.]+$"}, {"type": "null"}], "description": "The name of the repository", "title": "Repository"}, "description": "The name of the repository"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SimulatorPayload"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SimulatorResponse"}}}}, "403": {"description": "Forbidden"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/repos/{owner}/{repository}/simulator": {"post": {"tags": ["simulator"], "summary": "Get a Mergify simulation for a repository", "description": "Get a simulation of what Mergify will do for this repository", "operationId": "simulator_repo_repos__owner___repository__simulator_post", "security": [{"ApplicationAuth": []}], "parameters": [{"name": "owner", "in": "path", "required": true, "schema": {"type": "string", "minLength": 1, "maxLength": 40, "pattern": "^[a-zA-Z0-9\\-]+$", "description": "The owner of the repository", "title": "Owner"}, "description": "The owner of the repository"}, {"name": "repository", "in": "path", "required": true, "schema": {"anyOf": [{"type": "string", "minLength": 1, "pattern": "^[\\w\\-\\.]+$"}, {"type": "null"}], "description": "The name of the repository", "title": "Repository"}, "description": "The name of the repository"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SimulatorPayload"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SimulatorResponse"}}}}, "403": {"description": "Forbidden"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/repos/{owner}/{repository}/configuration-simulator": {"post": {"tags": ["simulator"], "summary": "Get a Mergify configuration simulation for a repository", "description": "Get a simulation of what Mergify will do for this repository", "operationId": "repository_configuration_simulator_repos__owner___repository__configuration_simulator_post", "security": [{"ApplicationAuth": []}], "parameters": [{"name": "owner", "in": "path", "required": true, "schema": {"type": "string", "minLength": 1, "maxLength": 40, "pattern": "^[a-zA-Z0-9\\-]+$", "description": "The owner of the repository", "title": "Owner"}, "description": "The owner of the repository"}, {"name": "repository", "in": "path", "required": true, "schema": {"anyOf": [{"type": "string", "minLength": 1, "pattern": "^[\\w\\-\\.]+$"}, {"type": "null"}], "description": "The name of the repository", "title": "Repository"}, "description": "The name of the repository"}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SimulatorPayload"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RepositoryConfigurationSimulatorResponse"}, "example": {"message": "The configuration is valid"}}}}, "403": {"description": "Forbidden"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/repos/{owner}/{repository}/logs": {"get": {"tags": ["eventlogs"], "summary": "Get the events log", "description": "Get the events logs of the requested repository", "operationId": "get_repository_events_repos__owner___repository__logs_get", "security": [{"ApplicationAuth": []}], "parameters": [{"name": "owner", "in": "path", "required": true, "schema": {"type": "string", "minLength": 1, "maxLength": 40, "pattern": "^[a-zA-Z0-9\\-]+$", "description": "The owner of the repository", "title": "Owner"}, "description": "The owner of the repository"}, {"name": "repository", "in": "path", "required": true, "schema": {"anyOf": [{"type": "string", "minLength": 1, "pattern": "^[\\w\\-\\.]+$"}, {"type": "null"}], "description": "The name of the repository", "title": "Repository"}, "description": "The name of the repository"}, {"name": "pull_request", "in": "query", "required": false, "schema": {"anyOf": [{"type": "integer", "minimum": 1, "exclusiveMaximum": 2147483647}, {"type": "null"}], "description": "Get the events for the specified pull request", "title": "Pull Request"}, "description": "Get the events for the specified pull request"}, {"name": "base_ref", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "Get events for PRs to the given base ref", "title": "Base Ref"}, "description": "Get events for PRs to the given base ref"}, {"name": "event_type", "in": "query", "required": false, "schema": {"anyOf": [{"type": "array", "items": {"$ref": "#/components/schemas/EventType"}}, {"type": "null"}], "description": "The specific types of events to select", "title": "Event Type"}, "description": "The specific types of events to select"}, {"name": "received_from", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string", "format": "date-time"}, {"type": "null"}], "description": "Get the events received from this date", "title": "Received From"}, "description": "Get the events received from this date"}, {"name": "received_to", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string", "format": "date-time"}, {"type": "null"}], "description": "Get the events received until this date", "title": "Received To"}, "description": "Get the events received until this date"}, {"name": "cursor", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The opaque cursor of the current page. Must be extracted for RFC 5988 pagination links to get first/previous/next/last pages", "title": "Cursor"}, "description": "The opaque cursor of the current page. Must be extracted for RFC 5988 pagination links to get first/previous/next/last pages"}, {"name": "per_page", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 100, "minimum": 1, "description": "The number of items per page", "default": 10, "title": "Per Page"}, "description": "The number of items per page"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/EventsResponse"}}}, "headers": {"Link": {"description": "Pagination links (rfc5988)", "example": "Link: <https://api.mergify.com/v1/repos/Mergifyio/mergify-engine/logs?cursor=def&per_page=20>; rel=\"next\",\n  <https://api.mergify.com/v1/repos/Mergifyio/mergify-engine/logs?cursor=xyz&per_page=20>; rel=\"last\",\n  <https://api.mergify.com/v1/repos/Mergifyio/mergify-engine/logs?cursor=abc&per_page=20>; rel=\"first\",\n  <https://api.mergify.com/v1/repos/Mergifyio/mergify-engine/logs?cursor=abc&per_page=20>; rel=\"prev\"", "schema": {"type": "string"}}}}, "403": {"description": "Forbidden"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/repos/{owner}/{repository}/stats/time_to_merge": {"get": {"tags": ["statistics"], "summary": "Time to merge statistics for every queues and partitions", "description": "Get the average time to merge statistics, in seconds, for all the queues and partitions in the repository", "operationId": "get_time_to_merge_stats_for_all_queues_and_partitions_endpoint_repos__owner___repository__stats_time_to_merge_get", "security": [{"ApplicationAuth": []}], "parameters": [{"name": "owner", "in": "path", "required": true, "schema": {"type": "string", "minLength": 1, "maxLength": 40, "pattern": "^[a-zA-Z0-9\\-]+$", "description": "The owner of the repository", "title": "Owner"}, "description": "The owner of the repository"}, {"name": "repository", "in": "path", "required": true, "schema": {"anyOf": [{"type": "string", "minLength": 1, "pattern": "^[\\w\\-\\.]+$"}, {"type": "null"}], "description": "The name of the repository", "title": "Repository"}, "description": "The name of the repository"}, {"name": "at", "in": "query", "required": false, "schema": {"anyOf": [{"type": "integer"}, {"type": "null"}], "description": "Retrieve the time to merge at this timestamp (in seconds)", "title": "At"}, "description": "Retrieve the time to merge at this timestamp (in seconds)"}, {"name": "branch", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The name of the branch", "title": "Branch"}, "description": "The name of the branch"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/TimeToMergePerPartition"}, "title": "Response Get Time To Merge Stats For All Queues And Partitions Endpoint Repos  Owner   Repository  Stats Time To Merge Get"}}}}, "403": {"description": "Forbidden"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/repos/{owner}/{repository}/queues/{queue_name}/stats/time_to_merge": {"get": {"tags": ["statistics"], "summary": "Time to merge statistics for queue name", "description": "Get the average time to merge statistics, in seconds, for the specified queue name only if partitions are not used in this repository", "operationId": "get_average_time_to_merge_stats_endpoint_repos__owner___repository__queues__queue_name__stats_time_to_merge_get", "security": [{"ApplicationAuth": []}], "parameters": [{"name": "owner", "in": "path", "required": true, "schema": {"type": "string", "minLength": 1, "maxLength": 40, "pattern": "^[a-zA-Z0-9\\-]+$", "description": "The owner of the repository", "title": "Owner"}, "description": "The owner of the repository"}, {"name": "repository", "in": "path", "required": true, "schema": {"anyOf": [{"type": "string", "minLength": 1, "pattern": "^[\\w\\-\\.]+$"}, {"type": "null"}], "description": "The name of the repository", "title": "Repository"}, "description": "The name of the repository"}, {"name": "queue_name", "in": "path", "required": true, "schema": {"type": "string", "description": "Name of the queue", "title": "Queue Name"}, "description": "Name of the queue"}, {"name": "at", "in": "query", "required": false, "schema": {"anyOf": [{"type": "integer"}, {"type": "null"}], "description": "Retrieve the average time to merge for the queue at this timestamp (in seconds)", "title": "At"}, "description": "Retrieve the average time to merge for the queue at this timestamp (in seconds)"}, {"name": "branch", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The name of the branch", "title": "Branch"}, "description": "The name of the branch"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TimeToMergeResponse"}}}}, "403": {"description": "Forbidden"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/repos/{owner}/{repository}/partitions/{partition_name}/queues/{queue_name}/stats/time_to_merge": {"get": {"tags": ["statistics"], "summary": "Time to merge statistics for queue name of partition", "description": "Get the average time to merge statistics, in seconds, for the specified queue name of the specified partition", "operationId": "get_average_time_to_merge_stats_partition_endpoint_repos__owner___repository__partitions__partition_name__queues__queue_name__stats_time_to_merge_get", "security": [{"ApplicationAuth": []}], "parameters": [{"name": "owner", "in": "path", "required": true, "schema": {"type": "string", "minLength": 1, "maxLength": 40, "pattern": "^[a-zA-Z0-9\\-]+$", "description": "The owner of the repository", "title": "Owner"}, "description": "The owner of the repository"}, {"name": "repository", "in": "path", "required": true, "schema": {"anyOf": [{"type": "string", "minLength": 1, "pattern": "^[\\w\\-\\.]+$"}, {"type": "null"}], "description": "The name of the repository", "title": "Repository"}, "description": "The name of the repository"}, {"name": "partition_name", "in": "path", "required": true, "schema": {"type": "string", "title": "PartitionName", "description": "The name of the partition"}, "description": "The name of the partition"}, {"name": "queue_name", "in": "path", "required": true, "schema": {"type": "string", "description": "Name of the queue", "title": "Queue Name"}, "description": "Name of the queue"}, {"name": "at", "in": "query", "required": false, "schema": {"anyOf": [{"type": "integer"}, {"type": "null"}], "description": "Retrieve the average time to merge for the queue at this timestamp (in seconds)", "title": "At"}, "description": "Retrieve the average time to merge for the queue at this timestamp (in seconds)"}, {"name": "branch", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The name of the branch", "title": "Branch"}, "description": "The name of the branch"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TimeToMergeResponse"}}}}, "403": {"description": "Forbidden"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/repos/{owner}/{repository}/stats/queue_checks_outcome": {"get": {"tags": ["statistics"], "summary": "Queue checks outcome statistics for every queues and partitions", "description": "Get the queue checks outcome statistics for all the queues and partitions in the repository", "operationId": "get_queue_checks_outcome_stats_for_all_queues_and_partitions_endpoint_repos__owner___repository__stats_queue_checks_outcome_get", "security": [{"ApplicationAuth": []}], "parameters": [{"name": "owner", "in": "path", "required": true, "schema": {"type": "string", "minLength": 1, "maxLength": 40, "pattern": "^[a-zA-Z0-9\\-]+$", "description": "The owner of the repository", "title": "Owner"}, "description": "The owner of the repository"}, {"name": "repository", "in": "path", "required": true, "schema": {"anyOf": [{"type": "string", "minLength": 1, "pattern": "^[\\w\\-\\.]+$"}, {"type": "null"}], "description": "The name of the repository", "title": "Repository"}, "description": "The name of the repository"}, {"name": "start_at", "in": "query", "required": false, "schema": {"anyOf": [{"type": "integer"}, {"type": "null"}], "description": "Retrieve the stats that happened after this timestamp (in seconds)", "title": "Start At"}, "description": "Retrieve the stats that happened after this timestamp (in seconds)"}, {"name": "end_at", "in": "query", "required": false, "schema": {"anyOf": [{"type": "integer"}, {"type": "null"}], "description": "Retrieve the stats that happened before this timestamp (in seconds)", "title": "End At"}, "description": "Retrieve the stats that happened before this timestamp (in seconds)"}, {"name": "branch", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The name of the branch", "title": "Branch"}, "description": "The name of the branch"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/QueueChecksOutcomePerPartition"}, "title": "Response Get Queue Checks Outcome Stats For All Queues And Partitions Endpoint Repos  Owner   Repository  Stats Queue Checks Outcome Get"}}}}, "403": {"description": "Forbidden"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/repos/{owner}/{repository}/queues/{queue_name}/stats/queue_checks_outcome": {"get": {"tags": ["statistics"], "summary": "Queue checks outcome statistics for queue name", "description": "Get the queue checks outcome statistics for the specified queue name, only if partitions are not used in this repository", "operationId": "get_queue_checks_outcome_stats_all_partitions_endpoint_repos__owner___repository__queues__queue_name__stats_queue_checks_outcome_get", "security": [{"ApplicationAuth": []}], "parameters": [{"name": "owner", "in": "path", "required": true, "schema": {"type": "string", "minLength": 1, "maxLength": 40, "pattern": "^[a-zA-Z0-9\\-]+$", "description": "The owner of the repository", "title": "Owner"}, "description": "The owner of the repository"}, {"name": "repository", "in": "path", "required": true, "schema": {"anyOf": [{"type": "string", "minLength": 1, "pattern": "^[\\w\\-\\.]+$"}, {"type": "null"}], "description": "The name of the repository", "title": "Repository"}, "description": "The name of the repository"}, {"name": "queue_name", "in": "path", "required": true, "schema": {"type": "string", "description": "Name of the queue", "title": "Queue Name"}, "description": "Name of the queue"}, {"name": "start_at", "in": "query", "required": false, "schema": {"anyOf": [{"type": "integer"}, {"type": "null"}], "description": "Retrieve the stats that happened after this timestamp (in seconds)", "title": "Start At"}, "description": "Retrieve the stats that happened after this timestamp (in seconds)"}, {"name": "end_at", "in": "query", "required": false, "schema": {"anyOf": [{"type": "integer"}, {"type": "null"}], "description": "Retrieve the stats that happened before this timestamp (in seconds)", "title": "End At"}, "description": "Retrieve the stats that happened before this timestamp (in seconds)"}, {"name": "branch", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The name of the branch", "title": "Branch"}, "description": "The name of the branch"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/QueueChecksOutcome"}}}}, "403": {"description": "Forbidden"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/repos/{owner}/{repository}/partitions/{partition_name}/queues/{queue_name}/stats/queue_checks_outcome": {"get": {"tags": ["statistics"], "summary": "Queue checks outcome statistics for queue name of partition", "description": "Get the queue checks outcome statistics for the specified queue name of the specified partition", "operationId": "get_queue_checks_outcome_stats_partition_endpoint_repos__owner___repository__partitions__partition_name__queues__queue_name__stats_queue_checks_outcome_get", "security": [{"ApplicationAuth": []}], "parameters": [{"name": "owner", "in": "path", "required": true, "schema": {"type": "string", "minLength": 1, "maxLength": 40, "pattern": "^[a-zA-Z0-9\\-]+$", "description": "The owner of the repository", "title": "Owner"}, "description": "The owner of the repository"}, {"name": "repository", "in": "path", "required": true, "schema": {"anyOf": [{"type": "string", "minLength": 1, "pattern": "^[\\w\\-\\.]+$"}, {"type": "null"}], "description": "The name of the repository", "title": "Repository"}, "description": "The name of the repository"}, {"name": "partition_name", "in": "path", "required": true, "schema": {"type": "string", "title": "PartitionName", "description": "The name of the partition"}, "description": "The name of the partition"}, {"name": "queue_name", "in": "path", "required": true, "schema": {"type": "string", "description": "Name of the queue", "title": "Queue Name"}, "description": "Name of the queue"}, {"name": "start_at", "in": "query", "required": false, "schema": {"anyOf": [{"type": "integer"}, {"type": "null"}], "description": "Retrieve the stats that happened after this timestamp (in seconds)", "title": "Start At"}, "description": "Retrieve the stats that happened after this timestamp (in seconds)"}, {"name": "end_at", "in": "query", "required": false, "schema": {"anyOf": [{"type": "integer"}, {"type": "null"}], "description": "Retrieve the stats that happened before this timestamp (in seconds)", "title": "End At"}, "description": "Retrieve the stats that happened before this timestamp (in seconds)"}, {"name": "branch", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The name of the branch", "title": "Branch"}, "description": "The name of the branch"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/QueueChecksOutcome"}}}}, "403": {"description": "Forbidden"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/repos/{owner}/{repository}/queues/{queue_name}/stats/checks_duration": {"get": {"tags": ["statistics"], "summary": "Average checks duration statistics for queue name", "description": "Get the average checks duration statistics, in seconds, for the specified queue name only if partitions are not used in this repository", "operationId": "get_checks_duration_stats_endpoint_repos__owner___repository__queues__queue_name__stats_checks_duration_get", "security": [{"ApplicationAuth": []}], "parameters": [{"name": "owner", "in": "path", "required": true, "schema": {"type": "string", "minLength": 1, "maxLength": 40, "pattern": "^[a-zA-Z0-9\\-]+$", "description": "The owner of the repository", "title": "Owner"}, "description": "The owner of the repository"}, {"name": "repository", "in": "path", "required": true, "schema": {"anyOf": [{"type": "string", "minLength": 1, "pattern": "^[\\w\\-\\.]+$"}, {"type": "null"}], "description": "The name of the repository", "title": "Repository"}, "description": "The name of the repository"}, {"name": "queue_name", "in": "path", "required": true, "schema": {"type": "string", "description": "Name of the queue", "title": "Queue Name"}, "description": "Name of the queue"}, {"name": "start_at", "in": "query", "required": false, "schema": {"anyOf": [{"type": "integer"}, {"type": "null"}], "description": "Retrieve the stats that happened after this timestamp (in seconds)", "title": "Start At"}, "description": "Retrieve the stats that happened after this timestamp (in seconds)"}, {"name": "end_at", "in": "query", "required": false, "schema": {"anyOf": [{"type": "integer"}, {"type": "null"}], "description": "Retrieve the stats that happened before this timestamp (in seconds)", "title": "End At"}, "description": "Retrieve the stats that happened before this timestamp (in seconds)"}, {"name": "branch", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The name of the branch", "title": "Branch"}, "description": "The name of the branch"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChecksDurationResponse"}}}}, "403": {"description": "Forbidden"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/repos/{owner}/{repository}/partitions/{partition_name}/queues/{queue_name}/stats/checks_duration": {"get": {"tags": ["statistics"], "summary": "Average checks duration statistics for queue name of partition", "description": "Get the average checks duration statistics, in seconds, for the specified queue name of the specified partition", "operationId": "get_checks_duration_stats_partition_endpoint_repos__owner___repository__partitions__partition_name__queues__queue_name__stats_checks_duration_get", "security": [{"ApplicationAuth": []}], "parameters": [{"name": "owner", "in": "path", "required": true, "schema": {"type": "string", "minLength": 1, "maxLength": 40, "pattern": "^[a-zA-Z0-9\\-]+$", "description": "The owner of the repository", "title": "Owner"}, "description": "The owner of the repository"}, {"name": "repository", "in": "path", "required": true, "schema": {"anyOf": [{"type": "string", "minLength": 1, "pattern": "^[\\w\\-\\.]+$"}, {"type": "null"}], "description": "The name of the repository", "title": "Repository"}, "description": "The name of the repository"}, {"name": "partition_name", "in": "path", "required": true, "schema": {"type": "string", "title": "PartitionName", "description": "The name of the partition"}, "description": "The name of the partition"}, {"name": "queue_name", "in": "path", "required": true, "schema": {"type": "string", "description": "Name of the queue", "title": "Queue Name"}, "description": "Name of the queue"}, {"name": "start_at", "in": "query", "required": false, "schema": {"anyOf": [{"type": "integer"}, {"type": "null"}], "description": "Retrieve the stats that happened after this timestamp (in seconds)", "title": "Start At"}, "description": "Retrieve the stats that happened after this timestamp (in seconds)"}, {"name": "end_at", "in": "query", "required": false, "schema": {"anyOf": [{"type": "integer"}, {"type": "null"}], "description": "Retrieve the stats that happened before this timestamp (in seconds)", "title": "End At"}, "description": "Retrieve the stats that happened before this timestamp (in seconds)"}, {"name": "branch", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "description": "The name of the branch", "title": "Branch"}, "description": "The name of the branch"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChecksDurationResponse"}}}}, "403": {"description": "Forbidden"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/repos/{owner}/{repository}/stats/queues_merged_count": {"get": {"tags": ["statistics"], "summary": "Get the count of pull requests merged by queues", "description": "Queues pull requests merged by intervals of time", "operationId": "get_queues_pull_requests_merged_count_repos__owner___repository__stats_queues_merged_count_get", "security": [{"ApplicationAuth": []}], "parameters": [{"name": "owner", "in": "path", "required": true, "schema": {"type": "string", "minLength": 1, "maxLength": 40, "pattern": "^[a-zA-Z0-9\\-]+$", "description": "The owner of the repository", "title": "Owner"}, "description": "The owner of the repository"}, {"name": "repository", "in": "path", "required": true, "schema": {"anyOf": [{"type": "string", "minLength": 1, "pattern": "^[\\w\\-\\.]+$"}, {"type": "null"}], "description": "The name of the repository", "title": "Repository"}, "description": "The name of the repository"}, {"name": "base_ref", "in": "query", "required": false, "schema": {"anyOf": [{"type": "array", "items": {"type": "string"}}, {"type": "null"}], "description": "Base reference(s) of the pull requests", "title": "Base Ref"}, "description": "Base reference(s) of the pull requests"}, {"name": "partition_name", "in": "query", "required": false, "schema": {"anyOf": [{"type": "array", "items": {"type": "string"}}, {"type": "null"}], "description": "Partition name(s) of the pull requests", "title": "Partition Name"}, "description": "Partition name(s) of the pull requests"}, {"name": "queue_name", "in": "query", "required": false, "schema": {"anyOf": [{"type": "array", "items": {"type": "string"}}, {"type": "null"}], "description": "Name of the merge queue(s) for the pull requests", "title": "Queue Name"}, "description": "Name of the merge queue(s) for the pull requests"}, {"name": "start_at", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string", "format": "date-time"}, {"type": "null"}], "description": "Get the stats from this date", "title": "Start At"}, "description": "Get the stats from this date"}, {"name": "end_at", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string", "format": "date-time"}, {"type": "null"}], "description": "Get the stats until this date", "title": "End At"}, "description": "Get the stats until this date"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MergedCountResponse"}}}}, "403": {"description": "Forbidden"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/repos/{owner}/{repository}/stats/average_ci_runtime": {"get": {"tags": ["statistics"], "summary": "Get the average CI runtime", "description": "Runtime of your CI running on queued pull requests by intervals of time", "operationId": "get_average_ci_runtime_repos__owner___repository__stats_average_ci_runtime_get", "security": [{"ApplicationAuth": []}], "parameters": [{"name": "owner", "in": "path", "required": true, "schema": {"type": "string", "minLength": 1, "maxLength": 40, "pattern": "^[a-zA-Z0-9\\-]+$", "description": "The owner of the repository", "title": "Owner"}, "description": "The owner of the repository"}, {"name": "repository", "in": "path", "required": true, "schema": {"anyOf": [{"type": "string", "minLength": 1, "pattern": "^[\\w\\-\\.]+$"}, {"type": "null"}], "description": "The name of the repository", "title": "Repository"}, "description": "The name of the repository"}, {"name": "base_ref", "in": "query", "required": false, "schema": {"anyOf": [{"type": "array", "items": {"type": "string"}}, {"type": "null"}], "description": "Base reference(s) of the pull requests", "title": "Base Ref"}, "description": "Base reference(s) of the pull requests"}, {"name": "partition_name", "in": "query", "required": false, "schema": {"anyOf": [{"type": "array", "items": {"type": "string"}}, {"type": "null"}], "description": "Partition name(s) of the pull requests", "title": "Partition Name"}, "description": "Partition name(s) of the pull requests"}, {"name": "queue_name", "in": "query", "required": false, "schema": {"anyOf": [{"type": "array", "items": {"type": "string"}}, {"type": "null"}], "description": "Name of the merge queue(s) for the pull requests", "title": "Queue Name"}, "description": "Name of the merge queue(s) for the pull requests"}, {"name": "start_at", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string", "format": "date-time"}, {"type": "null"}], "description": "Get the stats from this date", "title": "Start At"}, "description": "Get the stats from this date"}, {"name": "end_at", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string", "format": "date-time"}, {"type": "null"}], "description": "Get the stats until this date", "title": "End At"}, "description": "Get the stats until this date"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/CIAverageRuntimeResponse"}}}}, "403": {"description": "Forbidden"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/repos/{owner}/{repository}/partitions": {"get": {"tags": ["queues"], "summary": "Get all the partitions", "description": "Get the list of pull requests queued in each merge queue, organized by partition name", "operationId": "repository_partitions_repos__owner___repository__partitions_get", "security": [{"ApplicationAuth": []}], "parameters": [{"name": "owner", "in": "path", "required": true, "schema": {"type": "string", "minLength": 1, "maxLength": 40, "pattern": "^[a-zA-Z0-9\\-]+$", "description": "The owner of the repository", "title": "Owner"}, "description": "The owner of the repository"}, {"name": "repository", "in": "path", "required": true, "schema": {"anyOf": [{"type": "string", "minLength": 1, "pattern": "^[\\w\\-\\.]+$"}, {"type": "null"}], "description": "The name of the repository", "title": "Repository"}, "description": "The name of the repository"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/BranchPartitions"}, "title": "Response Repository Partitions Repos  Owner   Repository  Partitions Get"}}}}, "403": {"description": "Forbidden"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/repos/{owner}/{repository}/partitions/branch/{branch_name}": {"get": {"tags": ["queues"], "summary": "Get all the partitions of a specific branch", "description": "Get the list of pull requests queued in each merge queue, organized by partition name", "operationId": "repository_partitions_branch_repos__owner___repository__partitions_branch__branch_name__get", "security": [{"ApplicationAuth": []}], "parameters": [{"name": "branch_name", "in": "path", "required": true, "schema": {"type": "string", "description": "The name of the branch", "title": "Branch Name"}, "description": "The name of the branch"}, {"name": "owner", "in": "path", "required": true, "schema": {"type": "string", "minLength": 1, "maxLength": 40, "pattern": "^[a-zA-Z0-9\\-]+$", "description": "The owner of the repository", "title": "Owner"}, "description": "The owner of the repository"}, {"name": "repository", "in": "path", "required": true, "schema": {"anyOf": [{"type": "string", "minLength": 1, "pattern": "^[\\w\\-\\.]+$"}, {"type": "null"}], "description": "The name of the repository", "title": "Repository"}, "description": "The name of the repository"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/BranchPartitions"}}}}, "403": {"description": "Forbidden"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/repos/{owner}/{repository}/partition/{partition_name}/branch/{branch_name}": {"get": {"tags": ["queues"], "summary": "Get a partition's merge queues", "description": "Get the list of pull requests queued in each merge queue of a partition", "operationId": "repository_partition_branch_repos__owner___repository__partition__partition_name__branch__branch_name__get", "security": [{"ApplicationAuth": []}], "parameters": [{"name": "branch_name", "in": "path", "required": true, "schema": {"type": "string", "description": "The name of the branch", "title": "Branch Name"}, "description": "The name of the branch"}, {"name": "owner", "in": "path", "required": true, "schema": {"type": "string", "minLength": 1, "maxLength": 40, "pattern": "^[a-zA-Z0-9\\-]+$", "description": "The owner of the repository", "title": "Owner"}, "description": "The owner of the repository"}, {"name": "repository", "in": "path", "required": true, "schema": {"anyOf": [{"type": "string", "minLength": 1, "pattern": "^[\\w\\-\\.]+$"}, {"type": "null"}], "description": "The name of the repository", "title": "Repository"}, "description": "The name of the repository"}, {"name": "partition_name", "in": "path", "required": true, "schema": {"type": "string", "title": "PartitionName", "description": "The name of the partition"}, "description": "The name of the partition"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/Partition"}, {"type": "null"}], "title": "Response Repository Partition Branch Repos  Owner   Repository  Partition  Partition Name  Branch  Branch Name  Get"}}}}, "403": {"description": "Forbidden"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}}, "components": {"schemas": {"Actor": {"properties": {"type": {"type": "string", "enum": ["user", "application"], "title": "Type"}, "id": {"anyOf": [{"type": "integer"}, {"type": "string", "format": "uuid"}], "title": "Id"}, "name": {"type": "string", "title": "Name"}}, "type": "object", "required": ["type", "id", "name"], "title": "Actor"}, "ApplicationAccountScope": {"properties": {"id": {"type": "integer", "title": "Id"}, "login": {"type": "string", "title": "Login"}}, "type": "object", "required": ["id", "login"], "title": "ApplicationAccountScope"}, "ApplicationResponse": {"properties": {"id": {"type": "string", "format": "uuid4", "title": "Id"}, "name": {"type": "string", "title": "Name"}, "account_scope": {"$ref": "#/components/schemas/ApplicationAccountScope"}}, "type": "object", "required": ["id", "name", "account_scope"], "title": "ApplicationResponse"}, "Branch": {"properties": {"name": {"type": "string", "title": "Name", "description": "The name of the branch"}}, "type": "object", "required": ["name"], "title": "Branch"}, "BranchPartitions": {"properties": {"branch_name": {"type": "string", "title": "Branch Name", "description": ""}, "partitions": {"additionalProperties": {"items": {"$ref": "#/components/schemas/mergify_engine__web__api__partitions__index__PullRequestQueued"}, "type": "array"}, "type": "object", "title": "Partitions", "description": "A dictionary containing partition names as keys and, as a value of those key, the list of pull requests queued in the partition. If partition are not used in this repository, the default partition name used will be `__default__`."}}, "type": "object", "required": ["branch_name", "partitions"], "title": "BranchPartitions"}, "BriefMergeabilityCheck": {"properties": {"check_type": {"type": "string", "enum": ["in_place", "draft_pr"], "title": "Check Type", "description": "The type of queue check (in_place or draft_pr)"}, "pull_request_number": {"type": "integer", "title": "Pull Request Number", "description": "The number of the pull request used by the speculative check"}, "started_at": {"type": "string", "format": "date-time", "title": "Started At", "description": "The timestamp when the checks have started for this pull request"}, "ended_at": {"anyOf": [{"type": "string", "format": "date-time"}, {"type": "null"}], "title": "Ended At", "description": "The timestamp when the checks have ended for this pull request"}, "state": {"type": "string", "enum": ["success", "failure", "error", "cancelled", "skipped", "action_required", "timed_out", "pending", "neutral", "stale"], "title": "State", "description": "The global state of the checks"}}, "type": "object", "required": ["check_type", "pull_request_number", "started_at", "ended_at", "state"], "title": "BriefMergeabilityCheck"}, "CIAverageRuntimeResponse": {"properties": {"groups": {"items": {"$ref": "#/components/schemas/CIRuntimeGroupResponse"}, "type": "array", "title": "Groups"}}, "type": "object", "required": ["groups"], "title": "CIAverageRuntimeResponse"}, "CIRuntimeGroupResponse": {"properties": {"base_ref": {"type": "string", "title": "Base Ref"}, "partition_name": {"type": "string", "title": "Partition Name"}, "queue_name": {"type": "string", "title": "Queue Name"}, "stats": {"items": {"$ref": "#/components/schemas/RuntimeInInterval"}, "type": "array", "title": "Stats"}}, "type": "object", "required": ["base_ref", "partition_name", "queue_name", "stats"], "title": "CIRuntimeGroupResponse"}, "CheckConclusionWithStatuses": {"type": "string", "enum": ["success", "failure", "neutral", "cancelled", "skipped", "stale", "action_required", "timed_out", "error", "pending"], "title": "CheckConclusionWithStatuses"}, "ChecksDurationResponse": {"properties": {"mean": {"anyOf": [{"type": "number"}, {"type": "null"}], "title": "Mean"}, "median": {"anyOf": [{"type": "number"}, {"type": "null"}], "title": "Median"}}, "type": "object", "required": ["mean", "median"], "title": "ChecksDurationResponse"}, "EventAssign": {"properties": {"id": {"type": "integer", "title": "Id"}, "received_at": {"type": "string", "format": "date-time", "title": "Received At"}, "trigger": {"type": "string", "title": "Trigger"}, "repository": {"type": "string", "title": "Repository"}, "pull_request": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Pull Request"}, "base_ref": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Base Ref"}, "type": {"const": "action.assign", "title": "Type"}, "metadata": {"$ref": "#/components/schemas/EventAssignMetadata"}}, "type": "object", "required": ["id", "received_at", "trigger", "repository", "pull_request", "base_ref", "type", "metadata"], "title": "EventAssign"}, "EventAssignMetadata": {"properties": {"added": {"items": {"type": "string"}, "type": "array", "title": "Added"}, "removed": {"items": {"type": "string"}, "type": "array", "title": "Removed"}}, "type": "object", "title": "EventAssignMetadata"}, "EventBackport": {"properties": {"id": {"type": "integer", "title": "Id"}, "received_at": {"type": "string", "format": "date-time", "title": "Received At"}, "trigger": {"type": "string", "title": "Trigger"}, "repository": {"type": "string", "title": "Repository"}, "pull_request": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Pull Request"}, "base_ref": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Base Ref"}, "type": {"const": "action.backport", "title": "Type"}, "metadata": {"$ref": "#/components/schemas/EventCopyMetadata"}}, "type": "object", "required": ["id", "received_at", "trigger", "repository", "pull_request", "base_ref", "type", "metadata"], "title": "EventBackport"}, "EventClose": {"properties": {"id": {"type": "integer", "title": "Id"}, "received_at": {"type": "string", "format": "date-time", "title": "Received At"}, "trigger": {"type": "string", "title": "Trigger"}, "repository": {"type": "string", "title": "Repository"}, "pull_request": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Pull Request"}, "base_ref": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Base Ref"}, "type": {"const": "action.close", "title": "Type"}, "metadata": {"$ref": "#/components/schemas/EventCloseMetadata"}}, "type": "object", "required": ["id", "received_at", "trigger", "repository", "pull_request", "base_ref", "type", "metadata"], "title": "EventClose"}, "EventCloseMetadata": {"properties": {"message": {"type": "string", "title": "Message"}}, "type": "object", "title": "EventCloseMetadata"}, "EventComment": {"properties": {"id": {"type": "integer", "title": "Id"}, "received_at": {"type": "string", "format": "date-time", "title": "Received At"}, "trigger": {"type": "string", "title": "Trigger"}, "repository": {"type": "string", "title": "Repository"}, "pull_request": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Pull Request"}, "base_ref": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Base Ref"}, "type": {"const": "action.comment", "title": "Type"}, "metadata": {"$ref": "#/components/schemas/EventCommentMetadata"}}, "type": "object", "required": ["id", "received_at", "trigger", "repository", "pull_request", "base_ref", "type", "metadata"], "title": "EventComment"}, "EventCommentMetadata": {"properties": {"message": {"type": "string", "title": "Message"}}, "type": "object", "title": "EventCommentMetadata"}, "EventCopy": {"properties": {"id": {"type": "integer", "title": "Id"}, "received_at": {"type": "string", "format": "date-time", "title": "Received At"}, "trigger": {"type": "string", "title": "Trigger"}, "repository": {"type": "string", "title": "Repository"}, "pull_request": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Pull Request"}, "base_ref": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Base Ref"}, "type": {"const": "action.copy", "title": "Type"}, "metadata": {"$ref": "#/components/schemas/EventCopyMetadata"}}, "type": "object", "required": ["id", "received_at", "trigger", "repository", "pull_request", "base_ref", "type", "metadata"], "title": "EventCopy"}, "EventCopyMetadata": {"properties": {"to": {"type": "string", "title": "To"}, "pull_request_number": {"type": "integer", "title": "Pull Request Number"}, "conflicts": {"type": "boolean", "title": "Conflicts"}}, "type": "object", "title": "EventCopyMetadata"}, "EventDeleteHeadBranch": {"properties": {"id": {"type": "integer", "title": "Id"}, "received_at": {"type": "string", "format": "date-time", "title": "Received At"}, "trigger": {"type": "string", "title": "Trigger"}, "repository": {"type": "string", "title": "Repository"}, "pull_request": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Pull Request"}, "base_ref": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Base Ref"}, "type": {"const": "action.delete_head_branch", "title": "Type"}, "metadata": {"$ref": "#/components/schemas/EventDeleteHeadBranchMetadata"}}, "type": "object", "required": ["id", "received_at", "trigger", "repository", "pull_request", "base_ref", "type", "metadata"], "title": "EventDeleteHeadBranch"}, "EventDeleteHeadBranchMetadata": {"properties": {"branch": {"type": "string", "title": "Branch"}}, "type": "object", "title": "EventDeleteHeadBranchMetadata"}, "EventDismissReviews": {"properties": {"id": {"type": "integer", "title": "Id"}, "received_at": {"type": "string", "format": "date-time", "title": "Received At"}, "trigger": {"type": "string", "title": "Trigger"}, "repository": {"type": "string", "title": "Repository"}, "pull_request": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Pull Request"}, "base_ref": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Base Ref"}, "type": {"const": "action.dismiss_reviews", "title": "Type"}, "metadata": {"$ref": "#/components/schemas/EventDismissReviewsMetadata"}}, "type": "object", "required": ["id", "received_at", "trigger", "repository", "pull_request", "base_ref", "type", "metadata"], "title": "EventDismissReviews"}, "EventDismissReviewsMetadata": {"properties": {"users": {"items": {"type": "string"}, "type": "array", "title": "Users"}}, "type": "object", "title": "EventDismissReviewsMetadata"}, "EventEdit": {"properties": {"id": {"type": "integer", "title": "Id"}, "received_at": {"type": "string", "format": "date-time", "title": "Received At"}, "trigger": {"type": "string", "title": "Trigger"}, "repository": {"type": "string", "title": "Repository"}, "pull_request": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Pull Request"}, "base_ref": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Base Ref"}, "type": {"const": "action.edit", "title": "Type"}, "metadata": {"$ref": "#/components/schemas/EventEditMetadata"}}, "type": "object", "required": ["id", "received_at", "trigger", "repository", "pull_request", "base_ref", "type", "metadata"], "title": "EventEdit"}, "EventEditMetadata": {"properties": {"draft": {"type": "boolean", "title": "Draft"}}, "type": "object", "title": "EventEditMetadata"}, "EventGithubActions": {"properties": {"id": {"type": "integer", "title": "Id"}, "received_at": {"type": "string", "format": "date-time", "title": "Received At"}, "trigger": {"type": "string", "title": "Trigger"}, "repository": {"type": "string", "title": "Repository"}, "pull_request": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Pull Request"}, "base_ref": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Base Ref"}, "type": {"const": "action.github_actions", "title": "Type"}, "metadata": {"$ref": "#/components/schemas/EventGithubActionsMetadata"}}, "type": "object", "required": ["id", "received_at", "trigger", "repository", "pull_request", "base_ref", "type", "metadata"], "title": "EventGithubActions"}, "EventGithubActionsMetadata": {"properties": {"workflow": {"type": "string", "title": "Workflow"}, "inputs": {"additionalProperties": {"anyOf": [{"type": "string"}, {"type": "integer"}, {"type": "boolean"}]}, "type": "object", "title": "Inputs"}}, "type": "object", "title": "EventGithubActionsMetadata"}, "EventLabel": {"properties": {"id": {"type": "integer", "title": "Id"}, "received_at": {"type": "string", "format": "date-time", "title": "Received At"}, "trigger": {"type": "string", "title": "Trigger"}, "repository": {"type": "string", "title": "Repository"}, "pull_request": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Pull Request"}, "base_ref": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Base Ref"}, "type": {"const": "action.label", "title": "Type"}, "metadata": {"$ref": "#/components/schemas/EventLabelMetadata"}}, "type": "object", "required": ["id", "received_at", "trigger", "repository", "pull_request", "base_ref", "type", "metadata"], "title": "EventLabel"}, "EventLabelMetadata": {"properties": {"added": {"items": {"type": "string"}, "type": "array", "title": "Added"}, "removed": {"items": {"type": "string"}, "type": "array", "title": "Removed"}}, "type": "object", "title": "EventLabelMetadata"}, "EventMerge": {"properties": {"id": {"type": "integer", "title": "Id"}, "received_at": {"type": "string", "format": "date-time", "title": "Received At"}, "trigger": {"type": "string", "title": "Trigger"}, "repository": {"type": "string", "title": "Repository"}, "pull_request": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Pull Request"}, "base_ref": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Base Ref"}, "type": {"const": "action.merge", "title": "Type"}, "metadata": {"$ref": "#/components/schemas/EventMergeMetadata"}}, "type": "object", "required": ["id", "received_at", "trigger", "repository", "pull_request", "base_ref", "type", "metadata"], "title": "EventMerge"}, "EventMergeMetadata": {"properties": {"branch": {"type": "string", "title": "Branch"}}, "type": "object", "title": "EventMergeMetadata"}, "EventNoMetadata": {"properties": {}, "type": "object", "title": "EventNoMetadata"}, "EventPostCheck": {"properties": {"id": {"type": "integer", "title": "Id"}, "received_at": {"type": "string", "format": "date-time", "title": "Received At"}, "trigger": {"type": "string", "title": "Trigger"}, "repository": {"type": "string", "title": "Repository"}, "pull_request": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Pull Request"}, "base_ref": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Base Ref"}, "type": {"const": "action.post_check", "title": "Type"}, "metadata": {"$ref": "#/components/schemas/EventPostCheckMetadata"}}, "type": "object", "required": ["id", "received_at", "trigger", "repository", "pull_request", "base_ref", "type", "metadata"], "title": "EventPostCheck"}, "EventPostCheckMetadata": {"properties": {"conclusion": {"type": "string", "title": "Conclusion"}, "title": {"type": "string", "title": "Title"}, "summary": {"type": "string", "title": "Summary"}}, "type": "object", "title": "EventPostCheckMetadata"}, "EventQueueChange": {"properties": {"id": {"type": "integer", "title": "Id"}, "received_at": {"type": "string", "format": "date-time", "title": "Received At"}, "trigger": {"type": "string", "title": "Trigger"}, "repository": {"type": "string", "title": "Repository"}, "pull_request": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Pull Request"}, "base_ref": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Base Ref"}, "type": {"const": "action.queue.change", "title": "Type"}, "metadata": {"$ref": "#/components/schemas/EventQueueChangeMetadata"}}, "type": "object", "required": ["id", "received_at", "trigger", "repository", "pull_request", "base_ref", "type", "metadata"], "title": "EventQueueChange"}, "EventQueueChangeMetadata": {"properties": {"queue_name": {"type": "string", "title": "Queue Name"}, "partition_name": {"type": "string", "title": "Partition Name"}, "size": {"type": "integer", "title": "Size"}, "running_checks": {"type": "integer", "title": "Running Checks"}}, "type": "object", "title": "EventQueueChangeMetadata"}, "EventQueueChecksEnd": {"properties": {"id": {"type": "integer", "title": "Id"}, "received_at": {"type": "string", "format": "date-time", "title": "Received At"}, "trigger": {"type": "string", "title": "Trigger"}, "repository": {"type": "string", "title": "Repository"}, "pull_request": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Pull Request"}, "base_ref": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Base Ref"}, "type": {"const": "action.queue.checks_end", "title": "Type"}, "metadata": {"$ref": "#/components/schemas/EventQueueChecksEndMetadata"}}, "type": "object", "required": ["id", "received_at", "trigger", "repository", "pull_request", "base_ref", "type", "metadata"], "title": "EventQueueChecksEnd"}, "EventQueueChecksEndMetadata": {"properties": {"aborted": {"type": "boolean", "title": "Aborted"}, "abort_code": {"anyOf": [{"type": "string", "enum": ["PR_DEQUEUED", "PR_AHEAD_DEQUEUED", "PR_AHEAD_FAILED_TO_MERGE", "PR_WITH_HIGHER_PRIORITY_QUEUED", "PR_QUEUED_TWICE", "SPECULATIVE_CHECK_NUMBER_REDUCED", "CHECKS_TIMEOUT", "CHECKS_FAILED", "QUEUE_RULE_MISSING", "UNEXPECTED_QUEUE_CHANGE", "PR_FROZEN_NO_CASCADING", "BASE_BRANCH_MISSING", "BASE_BRANCH_CHANGED", "PR_UNEXPECTEDLY_FAILED_TO_MERGE", "BATCH_MAX_FAILURE_RESOLUTION_ATTEMPTS", "PR_CHECKS_STOPPED_BECAUSE_MERGE_QUEUE_PAUSE", "CONFLICT_WITH_BASE_BRANCH", "CONFLICT_WITH_PULL_AHEAD", "BRANCH_UPDATE_FAILED", "DRAFT_PULL_REQUEST_CHANGED", "PULL_REQUEST_UPDATED", "MERGE_QUEUE_RESET"]}, {"$ref": "#/components/schemas/QueueChecksAbortCode"}, {"type": "null"}], "title": "Abort Code"}, "abort_reason": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Abort Reason"}, "abort_status": {"anyOf": [{"type": "string", "enum": ["DEFINITIVE", "REEMBARKED"]}, {"$ref": "#/components/schemas/QueueChecksAbortStatus"}], "title": "Abort Status"}, "branch": {"type": "string", "title": "Branch"}, "partition_name": {"type": "string", "title": "Partition Name"}, "position": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Position"}, "queue_name": {"type": "string", "title": "Queue Name"}, "queued_at": {"type": "string", "format": "date-time", "title": "Queued At"}, "speculative_check_pull_request": {"$ref": "#/components/schemas/mergify_engine__signals__SpeculativeCheckPullRequest"}}, "type": "object", "title": "EventQueueChecksEndMetadata"}, "EventQueueChecksStart": {"properties": {"id": {"type": "integer", "title": "Id"}, "received_at": {"type": "string", "format": "date-time", "title": "Received At"}, "trigger": {"type": "string", "title": "Trigger"}, "repository": {"type": "string", "title": "Repository"}, "pull_request": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Pull Request"}, "base_ref": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Base Ref"}, "type": {"const": "action.queue.checks_start", "title": "Type"}, "metadata": {"$ref": "#/components/schemas/EventQueueChecksStartMetadata"}}, "type": "object", "required": ["id", "received_at", "trigger", "repository", "pull_request", "base_ref", "type", "metadata"], "title": "EventQueueChecksStart"}, "EventQueueChecksStartMetadata": {"properties": {"branch": {"type": "string", "title": "Branch"}, "partition_name": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Partition Name"}, "position": {"type": "integer", "title": "Position"}, "queue_name": {"type": "string", "title": "Queue Name"}, "queued_at": {"type": "string", "format": "date-time", "title": "Queued At"}, "start_reason": {"type": "string", "title": "Start Reason"}, "speculative_check_pull_request": {"$ref": "#/components/schemas/mergify_engine__signals__SpeculativeCheckPullRequest"}}, "type": "object", "title": "EventQueueChecksStartMetadata"}, "EventQueueEnter": {"properties": {"id": {"type": "integer", "title": "Id"}, "received_at": {"type": "string", "format": "date-time", "title": "Received At"}, "trigger": {"type": "string", "title": "Trigger"}, "repository": {"type": "string", "title": "Repository"}, "pull_request": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Pull Request"}, "base_ref": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Base Ref"}, "type": {"const": "action.queue.enter", "title": "Type"}, "metadata": {"$ref": "#/components/schemas/EventQueueEnterMetadata"}}, "type": "object", "required": ["id", "received_at", "trigger", "repository", "pull_request", "base_ref", "type", "metadata"], "title": "EventQueueEnter"}, "EventQueueEnterMetadata": {"properties": {"queue_name": {"type": "string", "title": "Queue Name"}, "branch": {"type": "string", "title": "Branch"}, "position": {"type": "integer", "title": "Position"}, "queued_at": {"type": "string", "format": "date-time", "title": "Queued At"}, "partition_name": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Partition Name"}}, "type": "object", "title": "EventQueueEnterMetadata"}, "EventQueueFreezeCreate": {"properties": {"id": {"type": "integer", "title": "Id"}, "received_at": {"type": "string", "format": "date-time", "title": "Received At"}, "trigger": {"type": "string", "title": "Trigger"}, "repository": {"type": "string", "title": "Repository"}, "pull_request": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Pull Request"}, "base_ref": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Base Ref"}, "type": {"const": "queue.freeze.create", "title": "Type"}, "metadata": {"$ref": "#/components/schemas/EventQueueFreezeCreateMetadata"}}, "type": "object", "required": ["id", "received_at", "trigger", "repository", "pull_request", "base_ref", "type", "metadata"], "title": "EventQueueFreezeCreate"}, "EventQueueFreezeCreateMetadata": {"properties": {"queue_name": {"type": "string", "title": "Queue Name"}, "reason": {"type": "string", "title": "Reason"}, "cascading": {"type": "boolean", "title": "Cascading"}, "created_by": {"$ref": "#/components/schemas/Actor"}}, "type": "object", "title": "EventQueueFreezeCreateMetadata"}, "EventQueueFreezeDelete": {"properties": {"id": {"type": "integer", "title": "Id"}, "received_at": {"type": "string", "format": "date-time", "title": "Received At"}, "trigger": {"type": "string", "title": "Trigger"}, "repository": {"type": "string", "title": "Repository"}, "pull_request": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Pull Request"}, "base_ref": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Base Ref"}, "type": {"const": "queue.freeze.delete", "title": "Type"}, "metadata": {"$ref": "#/components/schemas/EventQueueFreezeDeleteMetadata"}}, "type": "object", "required": ["id", "received_at", "trigger", "repository", "pull_request", "base_ref", "type", "metadata"], "title": "EventQueueFreezeDelete"}, "EventQueueFreezeDeleteMetadata": {"properties": {"queue_name": {"type": "string", "title": "Queue Name"}, "deleted_by": {"$ref": "#/components/schemas/Actor"}}, "type": "object", "title": "EventQueueFreezeDeleteMetadata"}, "EventQueueFreezeUpdate": {"properties": {"id": {"type": "integer", "title": "Id"}, "received_at": {"type": "string", "format": "date-time", "title": "Received At"}, "trigger": {"type": "string", "title": "Trigger"}, "repository": {"type": "string", "title": "Repository"}, "pull_request": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Pull Request"}, "base_ref": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Base Ref"}, "type": {"const": "queue.freeze.update", "title": "Type"}, "metadata": {"$ref": "#/components/schemas/EventQueueFreezeUpdateMetadata"}}, "type": "object", "required": ["id", "received_at", "trigger", "repository", "pull_request", "base_ref", "type", "metadata"], "title": "EventQueueFreezeUpdate"}, "EventQueueFreezeUpdateMetadata": {"properties": {"queue_name": {"type": "string", "title": "Queue Name"}, "reason": {"type": "string", "title": "Reason"}, "cascading": {"type": "boolean", "title": "Cascading"}, "updated_by": {"$ref": "#/components/schemas/Actor"}}, "type": "object", "title": "EventQueueFreezeUpdateMetadata"}, "EventQueueLeave": {"properties": {"id": {"type": "integer", "title": "Id"}, "received_at": {"type": "string", "format": "date-time", "title": "Received At"}, "trigger": {"type": "string", "title": "Trigger"}, "repository": {"type": "string", "title": "Repository"}, "pull_request": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Pull Request"}, "base_ref": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Base Ref"}, "type": {"const": "action.queue.leave", "title": "Type"}, "metadata": {"$ref": "#/components/schemas/EventQueueLeaveMetadata"}}, "type": "object", "required": ["id", "received_at", "trigger", "repository", "pull_request", "base_ref", "type", "metadata"], "title": "EventQueueLeave"}, "EventQueueLeaveMetadata": {"properties": {"reason": {"type": "string", "title": "Reason"}, "merged": {"type": "boolean", "title": "Merged"}, "queue_name": {"type": "string", "title": "Queue Name"}, "branch": {"type": "string", "title": "Branch"}, "position": {"type": "integer", "title": "Position"}, "partition_name": {"type": "string", "title": "Partition Name"}, "queued_at": {"type": "string", "format": "date-time", "title": "Queued At"}, "seconds_waiting_for_schedule": {"type": "integer", "title": "Seconds Waiting For Schedule"}, "seconds_waiting_for_freeze": {"type": "integer", "title": "Seconds Waiting For Freeze"}}, "type": "object", "title": "EventQueueLeaveMetadata"}, "EventQueueMerged": {"properties": {"id": {"type": "integer", "title": "Id"}, "received_at": {"type": "string", "format": "date-time", "title": "Received At"}, "trigger": {"type": "string", "title": "Trigger"}, "repository": {"type": "string", "title": "Repository"}, "pull_request": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Pull Request"}, "base_ref": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Base Ref"}, "type": {"const": "action.queue.merged", "title": "Type"}, "metadata": {"$ref": "#/components/schemas/EventQueueMergedMetadata"}}, "type": "object", "required": ["id", "received_at", "trigger", "repository", "pull_request", "base_ref", "type", "metadata"], "title": "EventQueueMerged"}, "EventQueueMergedMetadata": {"properties": {"branch": {"type": "string", "title": "Branch"}, "partition_names": {"items": {"type": "string"}, "type": "array", "title": "Partition Names"}, "queue_name": {"type": "string", "title": "Queue Name"}, "queued_at": {"type": "string", "format": "date-time", "title": "Queued At"}}, "type": "object", "title": "EventQueueMergedMetadata"}, "EventQueuePauseCreate": {"properties": {"id": {"type": "integer", "title": "Id"}, "received_at": {"type": "string", "format": "date-time", "title": "Received At"}, "trigger": {"type": "string", "title": "Trigger"}, "repository": {"type": "string", "title": "Repository"}, "pull_request": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Pull Request"}, "base_ref": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Base Ref"}, "type": {"const": "queue.pause.create", "title": "Type"}, "metadata": {"$ref": "#/components/schemas/EventQueuePauseCreateMetadata"}}, "type": "object", "required": ["id", "received_at", "trigger", "repository", "pull_request", "base_ref", "type", "metadata"], "title": "EventQueuePauseCreate"}, "EventQueuePauseCreateMetadata": {"properties": {"reason": {"type": "string", "title": "Reason"}, "created_by": {"$ref": "#/components/schemas/Actor"}}, "type": "object", "title": "EventQueuePauseCreateMetadata"}, "EventQueuePauseDelete": {"properties": {"id": {"type": "integer", "title": "Id"}, "received_at": {"type": "string", "format": "date-time", "title": "Received At"}, "trigger": {"type": "string", "title": "Trigger"}, "repository": {"type": "string", "title": "Repository"}, "pull_request": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Pull Request"}, "base_ref": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Base Ref"}, "type": {"const": "queue.pause.delete", "title": "Type"}, "metadata": {"$ref": "#/components/schemas/EventQueuePauseDeleteMetadata"}}, "type": "object", "required": ["id", "received_at", "trigger", "repository", "pull_request", "base_ref", "type", "metadata"], "title": "EventQueuePauseDelete"}, "EventQueuePauseDeleteMetadata": {"properties": {"deleted_by": {"$ref": "#/components/schemas/Actor"}}, "type": "object", "title": "EventQueuePauseDeleteMetadata"}, "EventQueuePauseUpdate": {"properties": {"id": {"type": "integer", "title": "Id"}, "received_at": {"type": "string", "format": "date-time", "title": "Received At"}, "trigger": {"type": "string", "title": "Trigger"}, "repository": {"type": "string", "title": "Repository"}, "pull_request": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Pull Request"}, "base_ref": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Base Ref"}, "type": {"const": "queue.pause.update", "title": "Type"}, "metadata": {"$ref": "#/components/schemas/EventQueuePauseUpdateMetadata"}}, "type": "object", "required": ["id", "received_at", "trigger", "repository", "pull_request", "base_ref", "type", "metadata"], "title": "EventQueuePauseUpdate"}, "EventQueuePauseUpdateMetadata": {"properties": {"reason": {"type": "string", "title": "Reason"}, "updated_by": {"$ref": "#/components/schemas/Actor"}}, "type": "object", "title": "EventQueuePauseUpdateMetadata"}, "EventRebase": {"properties": {"id": {"type": "integer", "title": "Id"}, "received_at": {"type": "string", "format": "date-time", "title": "Received At"}, "trigger": {"type": "string", "title": "Trigger"}, "repository": {"type": "string", "title": "Repository"}, "pull_request": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Pull Request"}, "base_ref": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Base Ref"}, "metadata": {"$ref": "#/components/schemas/EventNoMetadata"}, "type": {"const": "action.rebase", "title": "Type"}}, "type": "object", "required": ["id", "received_at", "trigger", "repository", "pull_request", "base_ref", "metadata", "type"], "title": "EventRebase"}, "EventRefresh": {"properties": {"id": {"type": "integer", "title": "Id"}, "received_at": {"type": "string", "format": "date-time", "title": "Received At"}, "trigger": {"type": "string", "title": "Trigger"}, "repository": {"type": "string", "title": "Repository"}, "pull_request": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Pull Request"}, "base_ref": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Base Ref"}, "metadata": {"$ref": "#/components/schemas/EventNoMetadata"}, "type": {"const": "action.refresh", "title": "Type"}}, "type": "object", "required": ["id", "received_at", "trigger", "repository", "pull_request", "base_ref", "metadata", "type"], "title": "EventRefresh"}, "EventRequestReviews": {"properties": {"id": {"type": "integer", "title": "Id"}, "received_at": {"type": "string", "format": "date-time", "title": "Received At"}, "trigger": {"type": "string", "title": "Trigger"}, "repository": {"type": "string", "title": "Repository"}, "pull_request": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Pull Request"}, "base_ref": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Base Ref"}, "type": {"const": "action.request_reviews", "title": "Type"}, "metadata": {"$ref": "#/components/schemas/EventRequestReviewsMetadata"}}, "type": "object", "required": ["id", "received_at", "trigger", "repository", "pull_request", "base_ref", "type", "metadata"], "title": "EventRequestReviews"}, "EventRequestReviewsMetadata": {"properties": {"reviewers": {"items": {"type": "string"}, "type": "array", "title": "Reviewers"}, "team_reviewers": {"items": {"type": "string"}, "type": "array", "title": "Team Reviewers"}}, "type": "object", "title": "EventRequestReviewsMetadata"}, "EventRequeue": {"properties": {"id": {"type": "integer", "title": "Id"}, "received_at": {"type": "string", "format": "date-time", "title": "Received At"}, "trigger": {"type": "string", "title": "Trigger"}, "repository": {"type": "string", "title": "Repository"}, "pull_request": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Pull Request"}, "base_ref": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Base Ref"}, "metadata": {"$ref": "#/components/schemas/EventNoMetadata"}, "type": {"const": "action.requeue", "title": "Type"}}, "type": "object", "required": ["id", "received_at", "trigger", "repository", "pull_request", "base_ref", "metadata", "type"], "title": "EventRequeue"}, "EventReview": {"properties": {"id": {"type": "integer", "title": "Id"}, "received_at": {"type": "string", "format": "date-time", "title": "Received At"}, "trigger": {"type": "string", "title": "Trigger"}, "repository": {"type": "string", "title": "Repository"}, "pull_request": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Pull Request"}, "base_ref": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Base Ref"}, "type": {"const": "action.review", "title": "Type"}, "metadata": {"$ref": "#/components/schemas/EventReviewMetadata"}}, "type": "object", "required": ["id", "received_at", "trigger", "repository", "pull_request", "base_ref", "type", "metadata"], "title": "EventReview"}, "EventReviewMetadata": {"properties": {"review_type": {"type": "string", "title": "Review Type"}, "reviewer": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Reviewer"}, "message": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Message"}}, "type": "object", "title": "EventReviewMetadata"}, "EventSquash": {"properties": {"id": {"type": "integer", "title": "Id"}, "received_at": {"type": "string", "format": "date-time", "title": "Received At"}, "trigger": {"type": "string", "title": "Trigger"}, "repository": {"type": "string", "title": "Repository"}, "pull_request": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Pull Request"}, "base_ref": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Base Ref"}, "metadata": {"$ref": "#/components/schemas/EventNoMetadata"}, "type": {"const": "action.squash", "title": "Type"}}, "type": "object", "required": ["id", "received_at", "trigger", "repository", "pull_request", "base_ref", "metadata", "type"], "title": "EventSquash"}, "EventType": {"type": "string", "enum": ["action.assign", "action.backport", "action.close", "action.comment", "action.copy", "action.delete_head_branch", "action.dismiss_reviews", "action.edit", "action.label", "action.merge", "action.post_check", "action.queue.enter", "action.queue.checks_start", "action.queue.checks_end", "action.queue.leave", "action.queue.merged", "action.rebase", "action.refresh", "action.request_reviews", "action.requeue", "action.review", "action.squash", "action.unqueue", "action.update", "queue.freeze.create", "queue.freeze.update", "queue.freeze.delete", "queue.pause.create", "queue.pause.update", "queue.pause.delete", "action.github_actions", "action.queue.change"], "title": "EventType"}, "EventUnqueue": {"properties": {"id": {"type": "integer", "title": "Id"}, "received_at": {"type": "string", "format": "date-time", "title": "Received At"}, "trigger": {"type": "string", "title": "Trigger"}, "repository": {"type": "string", "title": "Repository"}, "pull_request": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Pull Request"}, "base_ref": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Base Ref"}, "metadata": {"$ref": "#/components/schemas/EventNoMetadata"}, "type": {"const": "action.unqueue", "title": "Type"}}, "type": "object", "required": ["id", "received_at", "trigger", "repository", "pull_request", "base_ref", "metadata", "type"], "title": "EventUnqueue"}, "EventUpdate": {"properties": {"id": {"type": "integer", "title": "Id"}, "received_at": {"type": "string", "format": "date-time", "title": "Received At"}, "trigger": {"type": "string", "title": "Trigger"}, "repository": {"type": "string", "title": "Repository"}, "pull_request": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Pull Request"}, "base_ref": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Base Ref"}, "metadata": {"$ref": "#/components/schemas/EventNoMetadata"}, "type": {"const": "action.update", "title": "Type"}}, "type": "object", "required": ["id", "received_at", "trigger", "repository", "pull_request", "base_ref", "metadata", "type"], "title": "EventUpdate"}, "EventsResponse": {"properties": {"size": {"type": "integer", "title": "Size", "metadata": {"description": "The number of items in this page"}}, "per_page": {"type": "integer", "title": "Per Page", "metadata": {"description": "The number of items per page"}}, "events": {"items": {"anyOf": [{"$ref": "#/components/schemas/EventAssign"}, {"$ref": "#/components/schemas/EventBackport"}, {"$ref": "#/components/schemas/EventClose"}, {"$ref": "#/components/schemas/EventComment"}, {"$ref": "#/components/schemas/EventCopy"}, {"$ref": "#/components/schemas/EventDeleteHeadBranch"}, {"$ref": "#/components/schemas/EventDismissReviews"}, {"$ref": "#/components/schemas/EventEdit"}, {"$ref": "#/components/schemas/EventLabel"}, {"$ref": "#/components/schemas/EventMerge"}, {"$ref": "#/components/schemas/EventPostCheck"}, {"$ref": "#/components/schemas/EventGithubActions"}, {"$ref": "#/components/schemas/EventQueueEnter"}, {"$ref": "#/components/schemas/EventQueueLeave"}, {"$ref": "#/components/schemas/EventQueueChecksStart"}, {"$ref": "#/components/schemas/EventQueueChecksEnd"}, {"$ref": "#/components/schemas/EventQueueMerged"}, {"$ref": "#/components/schemas/EventRebase"}, {"$ref": "#/components/schemas/EventRefresh"}, {"$ref": "#/components/schemas/EventRequestReviews"}, {"$ref": "#/components/schemas/EventRequeue"}, {"$ref": "#/components/schemas/EventReview"}, {"$ref": "#/components/schemas/EventSquash"}, {"$ref": "#/components/schemas/EventUnqueue"}, {"$ref": "#/components/schemas/EventUpdate"}, {"$ref": "#/components/schemas/EventQueueFreezeCreate"}, {"$ref": "#/components/schemas/EventQueueFreezeUpdate"}, {"$ref": "#/components/schemas/EventQueueFreezeDelete"}, {"$ref": "#/components/schemas/EventQueuePauseCreate"}, {"$ref": "#/components/schemas/EventQueuePauseUpdate"}, {"$ref": "#/components/schemas/EventQueuePauseDelete"}, {"$ref": "#/components/schemas/EventQueueChange"}]}, "type": "array", "title": "Events", "metadata": {"description": "The list of events"}}}, "type": "object", "required": ["size", "per_page", "events"], "title": "EventsResponse"}, "HTTPValidationError": {"properties": {"detail": {"items": {"$ref": "#/components/schemas/ValidationError"}, "type": "array", "title": "Detail"}}, "type": "object", "title": "HTTPValidationError"}, "MergedCountResponse": {"properties": {"groups": {"items": {"$ref": "#/components/schemas/MergedGroupResponse"}, "type": "array", "title": "Groups"}}, "type": "object", "required": ["groups"], "title": "MergedCountResponse"}, "MergedGroupResponse": {"properties": {"base_ref": {"type": "string", "title": "Base Ref"}, "partition_names": {"items": {"type": "string"}, "type": "array", "title": "Partition Names"}, "queue_name": {"type": "string", "title": "Queue Name"}, "stats": {"items": {"$ref": "#/components/schemas/MergedInInterval"}, "type": "array", "title": "Stats"}}, "type": "object", "required": ["base_ref", "partition_names", "queue_name", "stats"], "title": "MergedGroupResponse"}, "MergedInInterval": {"properties": {"start": {"type": "string", "format": "date-time", "title": "Start"}, "end": {"type": "string", "format": "date-time", "title": "End"}, "merged": {"type": "integer", "title": "Merged"}}, "type": "object", "required": ["start", "end", "merged"], "title": "MergedInInterval"}, "Partition": {"properties": {"pull_requests": {"items": {"$ref": "#/components/schemas/mergify_engine__web__api__partitions__index__PullRequestQueued"}, "type": "array", "title": "Pull Requests", "description": "The pull requests queued in this partition"}}, "type": "object", "required": ["pull_requests"], "title": "Partition"}, "Queue": {"properties": {"branch": {"allOf": [{"$ref": "#/components/schemas/Branch"}], "description": "The branch of this queue"}, "pull_requests": {"items": {"$ref": "#/components/schemas/mergify_engine__web__api__queues__index__PullRequestQueued"}, "type": "array", "title": "Pull Requests", "description": "The pull requests in this queue"}}, "type": "object", "required": ["branch", "pull_requests"], "title": "Queue"}, "QueueCheck": {"properties": {"name": {"type": "string", "title": "Name", "description": "Check name"}, "description": {"type": "string", "title": "Description", "description": "Check description"}, "url": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Url", "description": "Check detail url"}, "state": {"type": "string", "enum": ["success", "failure", "error", "cancelled", "skipped", "action_required", "timed_out", "pending", "neutral", "stale"], "title": "State", "description": "Check state"}, "avatar_url": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Avatar Url", "description": "Check avatar_url"}}, "type": "object", "required": ["name", "description", "url", "state", "avatar_url"], "title": "QueueCheck"}, "QueueChecksAbortCode": {"type": "string", "enum": ["PR_DEQUEUED", "PR_AHEAD_DEQUEUED", "PR_AHEAD_FAILED_TO_MERGE", "PR_WITH_HIGHER_PRIORITY_QUEUED", "PR_QUEUED_TWICE", "SPECULATIVE_CHECK_NUMBER_REDUCED", "CHECKS_TIMEOUT", "CHECKS_FAILED", "QUEUE_RULE_MISSING", "UNEXPECTED_QUEUE_CHANGE", "PR_FROZEN_NO_CASCADING", "BASE_BRANCH_MISSING", "BASE_BRANCH_CHANGED", "PR_UNEXPECTEDLY_FAILED_TO_MERGE", "BATCH_MAX_FAILURE_RESOLUTION_ATTEMPTS", "PR_CHECKS_STOPPED_BECAUSE_MERGE_QUEUE_PAUSE", "CONFLICT_WITH_BASE_BRANCH", "CONFLICT_WITH_PULL_AHEAD", "BRANCH_UPDATE_FAILED", "DRAFT_PULL_REQUEST_CHANGED", "PULL_REQUEST_UPDATED", "MERGE_QUEUE_RESET"], "title": "QueueChecksAbortCode"}, "QueueChecksAbortStatus": {"type": "string", "enum": ["DEFINITIVE", "REEMBARKED"], "title": "QueueChecksAbortStatus"}, "QueueChecksOutcome": {"properties": {"PR_AHEAD_DEQUEUED": {"type": "integer", "title": "Pr Ahead Dequeued", "description": "A pull request ahead in the queue has been dequeued."}, "PR_AHEAD_FAILED_TO_MERGE": {"type": "integer", "title": "Pr Ahead Failed To Merge", "description": "A pull request ahead in the queue failed to get merged."}, "PR_WITH_HIGHER_PRIORITY_QUEUED": {"type": "integer", "title": "Pr With Higher Priority Queued", "description": "A pull request with a higher priority has been queued."}, "PR_QUEUED_TWICE": {"type": "integer", "title": "Pr Queued Twice", "description": "A pull request was queued twice."}, "SPECULATIVE_CHECK_NUMBER_REDUCED": {"type": "integer", "title": "Speculative Check Number Reduced", "description": "The number of speculative checks, in the queue rules, has been reduced."}, "CHECKS_TIMEOUT": {"type": "integer", "title": "Checks Timeout", "description": "The checks for the queued pull request have timed out."}, "CHECKS_FAILED": {"type": "integer", "title": "Checks Failed", "description": "The checks for the queued pull request have failed."}, "QUEUE_RULE_MISSING": {"type": "integer", "title": "Queue Rule Missing", "description": "The queue rules are missing because of a configuration change."}, "UNEXPECTED_QUEUE_CHANGE": {"type": "integer", "title": "Unexpected Queue Change", "description": "An unexpected change happened."}, "PR_FROZEN_NO_CASCADING": {"type": "integer", "title": "Pr Frozen No Cascading", "description": "A pull request has been freezed because of a queue freeze with cascading effect disabled."}, "SUCCESS": {"type": "integer", "title": "Success", "description": "Successfully merged the pull request."}, "PR_DEQUEUED": {"type": "integer", "title": "Pr Dequeued", "description": "Pull request has been dequeued"}, "BASE_BRANCH_CHANGED": {"type": "integer", "title": "Base Branch Changed", "description": "The pull request base branch has changed"}, "BASE_BRANCH_MISSING": {"type": "integer", "title": "Base Branch Missing", "description": "The base branch does not exist anymore"}, "TARGET_BRANCH_CHANGED": {"type": "integer", "title": "Target Branch Changed", "description": "The pull request target branch has changed (This value is deprecated use BASE_BRANCH_CHANGED instead)"}, "TARGET_BRANCH_MISSING": {"type": "integer", "title": "Target Branch Missing", "description": "The target branch does not exist anymore (This value is deprecated use BASE_BRANCH_MISSING instead)"}, "PR_UNEXPECTEDLY_FAILED_TO_MERGE": {"type": "integer", "title": "Pr Unexpectedly Failed To Merge", "description": "Pull request unexpectedly failed to get merged"}, "BATCH_MAX_FAILURE_RESOLUTION_ATTEMPTS": {"type": "integer", "title": "Batch Max Failure Resolution Attempts", "description": "The maximum batch failure resolution attempts has been reached"}, "PR_CHECKS_STOPPED_BECAUSE_MERGE_QUEUE_PAUSE": {"type": "integer", "title": "Pr Checks Stopped Because Merge Queue Pause", "description": "The checks have been interrupted because the merge queue is paused on this repository"}, "CONFLICT_WITH_BASE_BRANCH": {"type": "integer", "title": "Conflict With Base Branch", "description": "The pull request conflicts with the base branch"}, "CONFLICT_WITH_PULL_AHEAD": {"type": "integer", "title": "Conflict With Pull Ahead", "description": "The pull request conflicts with at least one pull request ahead in queue"}, "BRANCH_UPDATE_FAILED": {"type": "integer", "title": "Branch Update Failed", "description": "The pull request can't be updated for security reasons"}, "DRAFT_PULL_REQUEST_CHANGED": {"type": "integer", "title": "Draft Pull Request Changed", "description": "The draft pull request has been unexpectedly changed"}, "PULL_REQUEST_UPDATED": {"type": "integer", "title": "Pull Request Updated", "description": "The pull request has been unexpectedly updated"}, "MERGE_QUEUE_RESET": {"type": "integer", "title": "Merge Queue Reset", "description": "The merge queue has been reset"}}, "type": "object", "required": ["PR_AHEAD_DEQUEUED", "PR_AHEAD_FAILED_TO_MERGE", "PR_WITH_HIGHER_PRIORITY_QUEUED", "PR_QUEUED_TWICE", "SPECULATIVE_CHECK_NUMBER_REDUCED", "CHECKS_TIMEOUT", "CHECKS_FAILED", "QUEUE_RULE_MISSING", "UNEXPECTED_QUEUE_CHANGE", "PR_FROZEN_NO_CASCADING", "SUCCESS", "PR_DEQUEUED", "BASE_BRANCH_CHANGED", "BASE_BRANCH_MISSING", "TARGET_BRANCH_CHANGED", "TARGET_BRANCH_MISSING", "PR_UNEXPECTEDLY_FAILED_TO_MERGE", "BATCH_MAX_FAILURE_RESOLUTION_ATTEMPTS", "PR_CHECKS_STOPPED_BECAUSE_MERGE_QUEUE_PAUSE", "CONFLICT_WITH_BASE_BRANCH", "CONFLICT_WITH_PULL_AHEAD", "BRANCH_UPDATE_FAILED", "DRAFT_PULL_REQUEST_CHANGED", "PULL_REQUEST_UPDATED", "MERGE_QUEUE_RESET"], "title": "QueueChecksOutcome"}, "QueueChecksOutcomePerPartition": {"properties": {"partition_name": {"type": "string", "title": "Partition Name", "description": "The name of the partition, if no partition are used the partition name will be `__default__`"}, "queues": {"items": {"$ref": "#/components/schemas/QueueChecksOutcomePerQueue"}, "type": "array", "title": "Queues", "description": "The checks outcomes data for each queue in the current partition"}}, "type": "object", "required": ["partition_name", "queues"], "title": "QueueChecksOutcomePerPartition"}, "QueueChecksOutcomePerQueue": {"properties": {"queue_name": {"type": "string", "title": "Queue Name", "description": "The name of the queue"}, "queue_checks_outcome": {"allOf": [{"$ref": "#/components/schemas/QueueChecksOutcome"}], "description": "The checks outcomes data for the partition's queue"}}, "type": "object", "required": ["queue_name", "queue_checks_outcome"], "title": "QueueChecksOutcomePerQueue"}, "QueueConfig": {"properties": {"priority": {"type": "integer", "title": "Priority"}, "speculative_checks": {"type": "integer", "title": "Speculative Checks"}, "batch_size": {"type": "integer", "title": "Batch Size"}, "batch_max_wait_time": {"type": "string", "format": "duration", "title": "Batch Max Wait Time"}, "allow_inplace_checks": {"type": "boolean", "title": "Allow Inplace Checks"}, "disallow_checks_interruption_from_queues": {"items": {"type": "string"}, "type": "array", "title": "Disallow Checks Interruption From Queues"}, "checks_timeout": {"anyOf": [{"type": "string", "format": "duration"}, {"type": "null"}], "title": "Checks Timeout"}, "draft_bot_account": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Draft Bot Account"}, "queue_branch_prefix": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Queue Branch Prefix"}, "queue_branch_merge_method": {"anyOf": [{"const": "fast-forward"}, {"type": "null"}], "title": "Queue Branch Merge Method"}, "allow_queue_branch_edit": {"type": "boolean", "title": "Allow Queue Branch Edit"}, "batch_max_failure_resolution_attempts": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Batch Max Failure Resolution Attempts"}, "commit_message_template": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Commit Message Template"}, "merge_method": {"anyOf": [{"type": "string", "enum": ["merge", "rebase", "squash", "fast-forward"]}, {"type": "null"}], "title": "Merge Method"}, "merge_bot_account": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Merge Bot Account"}, "update_method": {"anyOf": [{"type": "string", "enum": ["rebase", "merge"]}, {"type": "null"}], "title": "Update Method"}, "update_bot_account": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Update Bot Account"}, "autosquash": {"type": "boolean", "title": "Autosquash"}}, "type": "object", "required": ["priority", "speculative_checks", "batch_size", "batch_max_wait_time", "allow_inplace_checks", "disallow_checks_interruption_from_queues", "checks_timeout", "draft_bot_account", "queue_branch_prefix", "queue_branch_merge_method", "allow_queue_branch_edit", "batch_max_failure_resolution_attempts", "commit_message_template", "merge_method", "merge_bot_account", "update_method", "update_bot_account", "autosquash"], "title": "QueueConfig"}, "QueueFreeze": {"properties": {"name": {"type": "string", "title": "Name", "description": "Queue name"}, "reason": {"type": "string", "title": "Reason", "description": "The reason of the queue freeze"}, "freeze_date": {"type": "string", "format": "date-time", "title": "Freeze Date", "description": "The date and time of the freeze"}, "cascading": {"type": "boolean", "title": "Cascading", "description": "The active status of the cascading effect", "default": true}}, "type": "object", "required": ["name", "reason", "freeze_date"], "title": "QueueFreeze"}, "QueueFreezePayload": {"properties": {"reason": {"type": "string", "maxLength": 255, "title": "Reason", "description": "The reason of the queue freeze"}, "cascading": {"type": "boolean", "title": "Cascading", "description": "The active status of the cascading effect", "default": true}}, "type": "object", "required": ["reason"], "title": "QueueFreezePayload"}, "QueueFreezeResponse": {"properties": {"queue_freezes": {"items": {"$ref": "#/components/schemas/QueueFreeze"}, "type": "array", "title": "Queue Freezes", "description": "The frozen queues of the repository"}}, "type": "object", "required": ["queue_freezes"], "title": "QueueFreezeResponse"}, "QueuePause": {"properties": {"reason": {"type": "string", "title": "Reason", "description": "The reason of the queue pause"}, "pause_date": {"type": "string", "format": "date-time", "title": "Pause Date", "description": "The date and time of the freeze"}}, "type": "object", "required": ["reason", "pause_date"], "title": "QueuePause"}, "QueuePausePayload": {"properties": {"reason": {"type": "string", "maxLength": 255, "title": "Reason", "description": "The reason of the queue pause"}}, "type": "object", "required": ["reason"], "title": "QueuePausePayload"}, "QueuePauseResponse": {"properties": {"queue_pause": {"items": {"$ref": "#/components/schemas/QueuePause"}, "type": "array", "title": "Queue Pause", "description": "The pause of the repository"}}, "type": "object", "required": ["queue_pause"], "title": "QueuePauseResponse"}, "QueueRule": {"properties": {"name": {"type": "string", "title": "Name", "description": "The name of the queue rule"}, "config": {"type": "object", "description": "The configuration of the queue rule"}}, "type": "object", "required": ["name", "config"], "title": "QueueRule"}, "Queues": {"properties": {"queues": {"items": {"$ref": "#/components/schemas/Queue"}, "type": "array", "title": "Queues", "description": "The queues of the repository"}}, "type": "object", "required": ["queues"], "title": "Queues"}, "QueuesConfig": {"properties": {"configuration": {"items": {"$ref": "#/components/schemas/QueueRule"}, "type": "array", "title": "Configuration", "description": "The queues configuration of the repository"}}, "type": "object", "required": ["configuration"], "title": "QueuesConfig"}, "RepositoryConfigurationSimulatorResponse": {"properties": {"message": {"type": "string", "title": "Message", "description": "The message of the Mergify check run simulation"}}, "type": "object", "required": ["message"], "title": "RepositoryConfigurationSimulatorResponse"}, "RuntimeInInterval": {"properties": {"start": {"type": "string", "format": "date-time", "title": "Start"}, "end": {"type": "string", "format": "date-time", "title": "End"}, "runtime": {"type": "number", "title": "Runtime"}}, "type": "object", "required": ["start", "end", "runtime"], "title": "RuntimeInInterval"}, "Serialized": {"properties": {"name": {"type": "string", "title": "Name"}, "description": {"type": "string", "title": "Description"}, "url": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Url"}, "state": {"type": "string", "enum": ["success", "failure", "error", "cancelled", "skipped", "action_required", "timed_out", "pending", "neutral", "stale"], "title": "State"}, "avatar_url": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Avatar Url"}}, "type": "object", "required": ["name", "description", "url", "state", "avatar_url"], "title": "Serialized"}, "SimulatorPayload": {"properties": {"mergify_yml": {"type": "string", "maxLength": 1048576, "title": "Mergify Yml", "description": "A Mergify configuration"}}, "type": "object", "required": ["mergify_yml"], "title": "SimulatorPayload"}, "SimulatorResponse": {"properties": {"title": {"type": "string", "title": "Title", "description": "The title of the Mergify check run simulation"}, "summary": {"type": "string", "title": "Summary", "description": "The summary of the Mergify check run simulation"}}, "type": "object", "required": ["title", "summary"], "title": "SimulatorResponse"}, "TimeToMergePerPartition": {"properties": {"partition_name": {"type": "string", "title": "Partition Name", "description": "The name of the partition, if no partition are used the partition name will be `__default__`"}, "queues": {"items": {"$ref": "#/components/schemas/TimeToMergePerQueue"}, "type": "array", "title": "Queues", "description": "The time to merge data for each queue in the current partition"}}, "type": "object", "required": ["partition_name", "queues"], "title": "TimeToMergePerPartition"}, "TimeToMergePerQueue": {"properties": {"queue_name": {"type": "string", "title": "Queue Name", "description": "The name of the queue"}, "time_to_merge": {"allOf": [{"$ref": "#/components/schemas/TimeToMergeResponse"}], "description": "The time to merge data for the partition's queue"}}, "type": "object", "required": ["queue_name", "time_to_merge"], "title": "TimeToMergePerQueue"}, "TimeToMergeResponse": {"properties": {"mean": {"anyOf": [{"type": "number"}, {"type": "null"}], "title": "Mean"}, "median": {"anyOf": [{"type": "number"}, {"type": "null"}], "title": "Median"}}, "type": "object", "required": ["mean", "median"], "title": "TimeToMergeResponse"}, "ValidationError": {"properties": {"loc": {"items": {"anyOf": [{"type": "string"}, {"type": "integer"}]}, "type": "array", "title": "Location"}, "msg": {"type": "string", "title": "Message"}, "type": {"type": "string", "title": "Error Type"}}, "type": "object", "required": ["loc", "msg", "type"], "title": "ValidationError"}, "mergify_engine__signals__SpeculativeCheckPullRequest": {"properties": {"number": {"type": "integer", "title": "Number"}, "in_place": {"type": "boolean", "title": "In Place"}, "checks_timed_out": {"type": "boolean", "title": "Checks Timed Out"}, "checks_conclusion": {"anyOf": [{"type": "string", "enum": ["success", "failure", "error", "cancelled", "skipped", "action_required", "timed_out", "neutral", "stale", "pending"]}, {"$ref": "#/components/schemas/CheckConclusionWithStatuses"}], "title": "Checks Conclusion"}, "checks_started_at": {"anyOf": [{"type": "string", "format": "date-time"}, {"type": "null"}], "title": "Checks Started At"}, "checks_ended_at": {"anyOf": [{"type": "string", "format": "date-time"}, {"type": "null"}], "title": "Checks Ended At"}, "unsuccessful_checks": {"items": {"$ref": "#/components/schemas/Serialized"}, "type": "array", "title": "Unsuccessful Checks"}}, "type": "object", "title": "SpeculativeCheckPullRequest"}, "mergify_engine__web__api__partitions__index__PullRequestQueued": {"properties": {"number": {"type": "integer", "title": "Number", "description": "The number of the pull request"}, "position": {"type": "integer", "title": "Position", "description": "The position of the pull request in the queue. The first pull request in the queue is at position 0"}, "priority": {"type": "integer", "title": "Priority", "description": "The priority of this pull request"}, "effective_priority": {"type": "integer", "title": "Effective Priority", "description": "The effective priority of this pull request"}, "queue_rule": {"allOf": [{"$ref": "#/components/schemas/QueueRule"}], "description": "The queue rule associated to this pull request"}, "queued_at": {"type": "string", "format": "date-time", "title": "Queued At", "description": "The timestamp when the pull requested has entered in the queue"}, "mergeability_check": {"anyOf": [{"$ref": "#/components/schemas/BriefMergeabilityCheck"}, {"type": "null"}], "description": "Information about the mergeability check currently processed"}, "estimated_time_of_merge": {"anyOf": [{"type": "string", "format": "date-time"}, {"type": "null"}], "title": "Estimated Time Of Merge", "description": "The estimated timestamp when this pull request will be merged"}}, "type": "object", "required": ["number", "position", "priority", "effective_priority", "queue_rule", "queued_at", "mergeability_check", "estimated_time_of_merge"], "title": "PullRequestQueued"}, "mergify_engine__web__api__queues__index__PullRequestQueued": {"properties": {"number": {"type": "integer", "title": "Number", "description": "The number of the pull request"}, "position": {"type": "integer", "title": "Position", "description": "The position of the pull request in the queue. The first pull request in the queue is at position 0"}, "priority": {"type": "integer", "title": "Priority", "description": "The priority of this pull request"}, "effective_priority": {"type": "integer", "title": "Effective Priority", "description": "The effective priority of this pull request"}, "queue_rule": {"allOf": [{"$ref": "#/components/schemas/QueueRule"}], "description": "The queue rule associated to this pull request"}, "queued_at": {"type": "string", "format": "date-time", "title": "Queued At", "description": "The timestamp when the pull requested has entered in the queue"}, "speculative_check_pull_request": {"anyOf": [{"$ref": "#/components/schemas/mergify_engine__web__api__queues__index__SpeculativeCheckPullRequest"}, {"type": "null"}], "description": "Use `mergeability_check` instead", "deprecated": true}, "mergeability_check": {"anyOf": [{"$ref": "#/components/schemas/BriefMergeabilityCheck"}, {"type": "null"}], "description": "Information about the mergeability check currently processed"}, "estimated_time_of_merge": {"anyOf": [{"type": "string", "format": "date-time"}, {"type": "null"}], "title": "Estimated Time Of Merge", "description": "The estimated timestamp when this pull request will be merged"}, "partition_name": {"type": "string", "title": "Partition Name", "description": "The name of the partition, if any, in which the pull request is queued"}}, "type": "object", "required": ["number", "position", "priority", "effective_priority", "queue_rule", "queued_at", "speculative_check_pull_request", "mergeability_check", "estimated_time_of_merge", "partition_name"], "title": "PullRequestQueued"}, "mergify_engine__web__api__queues__index__SpeculativeCheckPullRequest": {"properties": {"in_place": {"type": "boolean", "title": "In Place", "description": "Whether the pull request has been checked in-place"}, "number": {"type": "integer", "title": "Number", "description": "The number of the pull request used by the speculative check"}, "started_at": {"anyOf": [{"type": "string", "format": "date-time"}, {"type": "null"}], "title": "Started At", "description": "The timestamp when the checks have started for this pull request"}, "ended_at": {"anyOf": [{"type": "string", "format": "date-time"}, {"type": "null"}], "title": "Ended At", "description": "The timestamp when the checks have ended for this pull request"}, "checks": {"items": {"$ref": "#/components/schemas/QueueCheck"}, "type": "array", "title": "Checks", "description": "The list of pull request checks"}, "evaluated_conditions": {"type": "string", "title": "Evaluated Conditions", "description": "The queue rule conditions evaluation report"}, "state": {"type": "string", "enum": ["success", "failure", "error", "cancelled", "skipped", "action_required", "timed_out", "pending", "neutral", "stale"], "title": "State", "description": "The global state of the checks"}}, "type": "object", "required": ["in_place", "number", "started_at", "ended_at", "checks", "evaluated_conditions", "state"], "title": "SpeculativeCheckPullRequest"}}, "securitySchemes": {"ApplicationAuth": {"type": "http", "scheme": "bearer"}}}, "tags": [{"name": "applications", "description": "Operations with applications."}, {"name": "badges", "description": "Operations with badges."}, {"name": "ci_issues", "description": "Operations with failed ci issues."}, {"name": "eventlogs", "description": "Operations with event logs."}, {"name": "events", "description": "Enhanced operations with events."}, {"name": "gha_failed_jobs", "description": "Operations with failed workflow jobs."}, {"name": "pull_requests", "description": "Operations with pull requests."}, {"name": "queues", "description": "Operations with queues."}, {"name": "simulator", "description": "Mergify configuration simulator."}, {"name": "statistics", "description": "Operations with statistics."}]}